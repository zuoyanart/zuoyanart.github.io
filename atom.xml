<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[左盐]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://zuoyanart.github.io/"/>
  <updated>2016-05-16T03:13:03.235Z</updated>
  <id>http://zuoyanart.github.io/</id>
  
  <author>
    <name><![CDATA[左盐]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[composer介绍与使用]]></title>
    <link href="http://zuoyanart.github.io/2016/05/16/composer%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://zuoyanart.github.io/2016/05/16/composer介绍与使用/</id>
    <published>2016-05-16T02:57:40.000Z</published>
    <updated>2016-05-16T03:13:03.235Z</updated>
    <content type="html"><![CDATA[<h2 id="composer_u7B80_u4ECB"><a href="#composer_u7B80_u4ECB" class="headerlink" title="composer简介"></a>composer简介</h2><p>用过nodejs的人都知道nodejs有一个包管理工具叫npm，使用npm可以轻松的管理依赖的库文件以及其版本，composer类似，他是php的包管理工具</p>
<h2 id="u8981_u6C42"><a href="#u8981_u6C42" class="headerlink" title="要求"></a>要求</h2><blockquote>
<p>php 5.3.2+</p>
</blockquote>
<h2 id="windows__u5B89_u88C5"><a href="#windows__u5B89_u88C5" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>下载<br><a href="https://getcomposer.org/Composer-Setup.exe" title=" Composer-Setup.exe" target="_blank" rel="external">https://getcomposer.org/Composer-Setup.exe</a>， 然后安装，然后就可以全局使用composer命令了</p>
<h2 id="u4F7F_u7528"><a href="#u4F7F_u7528" class="headerlink" title="使用"></a>使用</h2><h3 id="u521B_u5EFAcomposer-json_u6587_u4EF6"><a href="#u521B_u5EFAcomposer-json_u6587_u4EF6" class="headerlink" title="创建composer.json文件"></a>创建composer.json文件</h3><p>composer.json文件包含了依赖的基本配置。详情访问：<a href="http://docs.phpcomposer.com/01-basic-usage.html" target="_blank" rel="external">http://docs.phpcomposer.com/01-basic-usage.html</a></p>
<h2 id="u8BBE_u7F6E_u56FD_u5185_u955C_u50CF1"><a href="#u8BBE_u7F6E_u56FD_u5185_u955C_u50CF1" class="headerlink" title="设置国内镜像1"></a>设置国内镜像1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="composer_u7B80_u4ECB"><a href="#composer_u7B80_u4ECB" class="headerlink" title="composer简介"></a>composer简介</h2><p>用过nodejs的人都知道nodej]]>
    </summary>
    
      <category term="composer" scheme="http://zuoyanart.github.io/tags/composer/"/>
    
      <category term="php" scheme="http://zuoyanart.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shell命令之流程控制]]></title>
    <link href="http://zuoyanart.github.io/2016/05/06/shell%E5%91%BD%E4%BB%A4%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://zuoyanart.github.io/2016/05/06/shell命令之流程控制/</id>
    <published>2016-05-06T09:07:00.000Z</published>
    <updated>2016-05-06T09:24:23.221Z</updated>
    <content type="html"><![CDATA[<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p>在编写linux shell命令完成一些自动化的事情的时候，少不了关于流程的控制和条件判断，这里简单介绍几种简单的控制命令。</p>
<h2 id="u53CCand__uFF08_26amp_3B_26amp_3B_uFF09"><a href="#u53CCand__uFF08_26amp_3B_26amp_3B_uFF09" class="headerlink" title="双and （&amp;&amp;）"></a>双and （&amp;&amp;）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ../ &amp;&amp; mocha</span><br></pre></td></tr></table></figure>
<p><code>&amp;&amp;</code> 命令表示，第二条命令只有在第一条命令执行成功后执行。</p>
<h2 id="u53CC_u7AD6_u7EBF_uFF08_7C_7C_uFF09"><a href="#u53CC_u7AD6_u7EBF_uFF08_7C_7C_uFF09" class="headerlink" title="双竖线（||）"></a>双竖线（||）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ../ || mocha</span><br></pre></td></tr></table></figure>
<p><code>||</code> 命令表示，第二条命令只有在第一条命令执行不成功时执行。</p>
<h2 id="u5206_u53F7_uFF08_3B_uFF09"><a href="#u5206_u53F7_uFF08_3B_uFF09" class="headerlink" title="分号（;）"></a>分号（;）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /tmp/t2 /tmp/t2.bak; echo <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>
<p>顺序执行多条命令，当;号前的命令执行完（不管是否执行成功），才执行;后的命令。</p>
<h2 id="sleep_u3001"><a href="#sleep_u3001" class="headerlink" title="sleep、"></a>sleep、</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep <span class="number">20</span>s</span><br></pre></td></tr></table></figure>
<p>进程休眠一段时间，然后再进行</p>
<h2 id="u5355and__uFF08_26amp_3B_uFF09"><a href="#u5355and__uFF08_26amp_3B_uFF09" class="headerlink" title="单and （&amp;）"></a>单and （&amp;）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start &amp; cd ../</span><br></pre></td></tr></table></figure>
<p>与<code>;</code> 类似，但不代表第一个命令执行结束</p>
<h2 id="u8F93_u5165_u4E2D_u7AEF"><a href="#u8F93_u5165_u4E2D_u7AEF" class="headerlink" title="输入中端"></a>输入中端</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e <span class="string">'\003'</span></span><br></pre></td></tr></table></figure>
<p>模拟输出<code>Ctrl+C</code></p>
<h2 id="u6F14_u793A_u793A_u4F8B"><a href="#u6F14_u793A_u793A_u4F8B" class="headerlink" title="演示示例"></a>演示示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#步骤：</span><br><span class="line"># 检查mocha是否已经安装，没有安装则安装mocha</span><br><span class="line"># git clone项目所有源文件</span><br><span class="line"># 切换到项目目录，安装pkg</span><br><span class="line"># 进入到静态文件目录里，fis3构建静态文件</span><br><span class="line"># 切换到项目根目录，启动端口监听</span><br><span class="line"># 端口监听20s,然后模拟输出Ctrl+c,主要是确保bable编译完成</span><br><span class="line"># 运行mocha单元测试</span><br><span class="line">npm ls mocha || npm install mocha -g  &amp;&amp; git clone https://github.com/zuoyanart/pizzaManage &amp;&amp; cd pizzaManage &amp;&amp; cnpm install &amp;&amp; cd fis-static &amp;&amp; fis3 release -d ../ &amp;&amp; cd ../ &amp;&amp; npm start &amp; sleep 20s;echo -e '\003';cd app;mocha;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p>在编写linux shell命令完成一些自动化的事情的时候，少不了关于流程的控制和条件判断，这里简单介绍]]>
    </summary>
    
      <category term="linux" scheme="http://zuoyanart.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://zuoyanart.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[翻译nightwatchjs guid]]></title>
    <link href="http://zuoyanart.github.io/2016/05/04/nightwatch1/"/>
    <id>http://zuoyanart.github.io/2016/05/04/nightwatch1/</id>
    <published>2016-05-04T06:32:19.000Z</published>
    <updated>2016-05-06T09:26:51.458Z</updated>
    <content type="html"><![CDATA[<h2 id="u7EFC_u8FF0"><a href="#u7EFC_u8FF0" class="headerlink" title="综述"></a>综述</h2><h3 id="u4EC0_u4E48_u662FNightWatch_3F"><a href="#u4EC0_u4E48_u662FNightWatch_3F" class="headerlink" title="什么是NightWatch?"></a>什么是NightWatch?</h3><hr>
<p>NightWatch.js是一个web应用和web网站的自动化测试框架，使用nodejs编写，并使用第三方<a href="http://code.google.com/p/selenium/wiki/JsonWireProtocol" title="Selenium WebDriver API." target="_blank" rel="external">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>。</p>
<p>他是一个完整的浏览器自动化（端到端）解决方案，旨在简化CI的构建和书写自动化测试的过程。</p>
<h3 id="Selenium_u4ECB_u7ECD"><a href="#Selenium_u4ECB_u7ECD" class="headerlink" title="Selenium介绍"></a>Selenium介绍</h3><hr>
<p>Selenium 是一个非常受欢迎的浏览器自动化的全面工具集，最初是为java研发的，但是也支持其他大多数的编程语言。</p>
<p>Selenium主项目包含：</p>
<ul>
<li>Selenium IDE</li>
<li>Selenium Remote Control</li>
<li>Selenium WebDriver</li>
<li>Selenium Grid</li>
</ul>
<p>NightWatch 使用 Selenium WebDriver，特别是WebDriver Wire Protocol用来执行浏览器自动化相关的任务。</p>
<h2 id="u73B0_u5B9E_u539F_u7406"><a href="#u73B0_u5B9E_u539F_u7406" class="headerlink" title="现实原理"></a>现实原理</h2><p>NightWatch运行通过发送带有正确参数的HTTP请求到Selenium服务器然后解析响应。restful api协议的定义是通过 Selenium JsonWireProtocol,看下面的演示流程图。<br><img src="/mdimg/operation.png" alt=""></p>
<p>大部分情况下， NightWatch 需要发送至少两次请求到Selenium 服务去执行命令或断言，第一次请求通过一个css选择器或者xpath表达式来定位元素，然后在获取到的元素上执行命令或断言。</p>
<h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><h3 id="install_nodejs"><a href="#install_nodejs" class="headerlink" title="install nodejs"></a>install nodejs</h3><hr>
<p>这步省略，不翻译，网上的教程一大把。</p>
<h3 id="u5B89_u88C5_nightWatch"><a href="#u5B89_u88C5_nightWatch" class="headerlink" title="安装 nightWatch"></a>安装 nightWatch</h3><hr>
<p>安装最新的版本通过npm命令，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nightwatch</span><br></pre></td></tr></table></figure>
<p>国内用户还是建议使用cnpm<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install nightwatch</span><br></pre></td></tr></table></figure></p>
<h3 id="u8FD0_u884CSelenium__u670D_u52A1"><a href="#u8FD0_u884CSelenium__u670D_u52A1" class="headerlink" title="运行Selenium 服务"></a>运行Selenium 服务</h3><hr>
<p>Selenium web驱动服务是一个简单的java servlet运行与你想要测试的机器上。</p>
<h4 id="u4E0B_u8F7DSelenium"><a href="#u4E0B_u8F7DSelenium" class="headerlink" title="下载Selenium"></a>下载Selenium</h4><p>下载最新的版本从<a href="http://selenium-release.storage.googleapis.com/index.html" title=" Selenium downloads page" target="_blank" rel="external">http://selenium-release.storage.googleapis.com/index.html</a>， 名称为selenium-server-standalone-{VERSION}.jar， 下载好后把他放置于</p>
<p>阿斯达岁的阿萨德阿萨德阿萨德阿萨德阿萨德</p>
<h4 id="u81EA_u52A8_u8FD0_u884C"><a href="#u81EA_u52A8_u8FD0_u884C" class="headerlink" title="自动运行"></a>自动运行</h4><p>如果服务和nightwatch运行在一个机器上，那么他可以由 nightwatch Test Runner直接启动或停止。</p>
<h4 id="u624B_u52A8_u8FD0_u884C"><a href="#u624B_u52A8_u8FD0_u884C" class="headerlink" title="手动运行"></a>手动运行</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java -jar selenium-server-standalone-&#123;VERSION&#125;.jar</span><br></pre></td></tr></table></figure>
<p>更多的信息，请参考<br><a href="http://code.google.com/p/selenium/wiki/RemoteWebDriverServer" target="_blank" rel="external">http://code.google.com/p/selenium/wiki/RemoteWebDriverServer</a></p>
<p>如果想参考运行时的option，只需在上面的命令后添加 –help</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar selenium-server-standalone-&#123;VERSION&#125;.jar -help</span><br></pre></td></tr></table></figure>
<h2 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h2><p>测试运行期望一个基本的配置文件， 默认使用nightwatch.json这个文件在根目录下，现在，让我们创建一个在项目的根目录下。</p>
<p>nightwatch.json看起来像这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"src_folders"</span> : [<span class="string">"tests"</span>],</span><br><span class="line">  <span class="string">"output_folder"</span> : <span class="string">"reports"</span>,</span><br><span class="line">  <span class="string">"custom_commands_path"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="string">"custom_assertions_path"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="string">"page_objects_path"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="string">"globals_path"</span> : <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">"selenium"</span> : &#123;</span><br><span class="line">    <span class="string">"start_process"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"server_path"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"log_path"</span> : <span class="string">""</span>,</span><br><span class="line">    <span class="string">"host"</span> : <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"port"</span> : <span class="number">4444</span>,</span><br><span class="line">    <span class="string">"cli_args"</span> : &#123;</span><br><span class="line">      <span class="string">"webdriver.chrome.driver"</span> : <span class="string">""</span>,</span><br><span class="line">      <span class="string">"webdriver.ie.driver"</span> : <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"test_settings"</span> : &#123;</span><br><span class="line">    <span class="string">"default"</span> : &#123;</span><br><span class="line">      <span class="string">"launch_url"</span> : <span class="string">"http://localhost"</span>,</span><br><span class="line">      <span class="string">"selenium_port"</span>  : <span class="number">4444</span>,</span><br><span class="line">      <span class="string">"selenium_host"</span>  : <span class="string">"localhost"</span>,</span><br><span class="line">      <span class="string">"silent"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"screenshots"</span> : &#123;</span><br><span class="line">        <span class="string">"enabled"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"path"</span> : <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"desiredCapabilities"</span>: &#123;</span><br><span class="line">        <span class="string">"browserName"</span>: <span class="string">"firefox"</span>,</span><br><span class="line">        <span class="string">"javascriptEnabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"acceptSslCerts"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"chrome"</span> : &#123;</span><br><span class="line">      <span class="string">"desiredCapabilities"</span>: &#123;</span><br><span class="line">        <span class="string">"browserName"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">        <span class="string">"javascriptEnabled"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"acceptSslCerts"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4F7F_u7528NightWatch"><a href="#u4F7F_u7528NightWatch" class="headerlink" title="使用NightWatch"></a>使用NightWatch</h2><h3 id="u7F16_u5199_u6D4B_u8BD5"><a href="#u7F16_u5199_u6D4B_u8BD5" class="headerlink" title="编写测试"></a>编写测试</h3><p>优先使用css选择器指定页面上的元素这种模式，nightwatch能够非常容易的创建端到端的测试。<br>在你的项目中创建一个测试目录，比如tests，每一个文件都会自动被nightwatch自动加载。<br>一个基本的测试看来其像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'Demo test Google'</span> : <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">      .url(<span class="string">'http://www.google.com'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'body'</span>, <span class="number">1000</span>)</span><br><span class="line">      .setValue(<span class="string">'input[type=text]'</span>, <span class="string">'nightwatch'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'button[name=btnG]'</span>, <span class="number">1000</span>)</span><br><span class="line">      .click(<span class="string">'button[name=btnG]'</span>)</span><br><span class="line">      .pause(<span class="number">1000</span>)</span><br><span class="line">      .assert.containsText(<span class="string">'#main'</span>, <span class="string">'Night Watch'</span>)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<pre><code>切记当您完成测试的时候，永远要调用.end()方法。这个方法会通知Selenium正确的关闭
</code></pre><p>一个测试也可以包含多步，如果你需要：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'step one'</span> : <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">      .url(<span class="string">'http://www.google.com'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'body'</span>, <span class="number">1000</span>)</span><br><span class="line">      .setValue(<span class="string">'input[type=text]'</span>, <span class="string">'nightwatch'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'button[name=btnG]'</span>, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'step two'</span> : <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">      .click(<span class="string">'button[name=btnG]'</span>)</span><br><span class="line">      .pause(<span class="number">1000</span>)</span><br><span class="line">      .assert.containsText(<span class="string">'#main'</span>, <span class="string">'Night Watch'</span>)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>同样的也可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.demoTestGoogle = <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">  browser</span><br><span class="line">    .url(<span class="string">'http://www.google.com'</span>)</span><br><span class="line">    .waitForElementVisible(<span class="string">'body'</span>, <span class="number">1000</span>)</span><br><span class="line">    .setValue(<span class="string">'input[type=text]'</span>, <span class="string">'nightwatch'</span>)</span><br><span class="line">    .waitForElementVisible(<span class="string">'button[name=btnG]'</span>, <span class="number">1000</span>)</span><br><span class="line">    .click(<span class="string">'button[name=btnG]'</span>)</span><br><span class="line">    .pause(<span class="number">1000</span>)</span><br><span class="line">    .assert.containsText(<span class="string">'#main'</span>, <span class="string">'The Night Watch'</span>)</span><br><span class="line">    .end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="u4F7F_u7528XPath_u9009_u62E9_u5668"><a href="#u4F7F_u7528XPath_u9009_u62E9_u5668" class="headerlink" title="使用XPath选择器"></a>使用XPath选择器</h3><h3 id="BDD_Expect_u65AD_u8A00"><a href="#BDD_Expect_u65AD_u8A00" class="headerlink" title="BDD Expect断言"></a>BDD Expect断言</h3><p>nightwatch从v0.7开始引入新的BDD风格的断言库，大大的改善了断言的灵活性和可读性。<br>expect断言使用Expect的子集api。这是一个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'Demo test Google'</span> : <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    client</span><br><span class="line">      .url(<span class="string">'http://google.no'</span>)</span><br><span class="line">      .pause(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expect element  to be present in 1000ms</span></span><br><span class="line">    client.expect.element(<span class="string">'body'</span>).to.be.present.before(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expect element &lt;#lst-ib&gt; to have css property 'display'</span></span><br><span class="line">    client.expect.element(<span class="string">'#lst-ib'</span>).to.have.css(<span class="string">'display'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expect element  to have attribute 'class' which contains text 'vasq'</span></span><br><span class="line">    client.expect.element(<span class="string">'body'</span>).to.have.attribute(<span class="string">'class'</span>).which.contains(<span class="string">'vasq'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expect element &lt;#lst-ib&gt; to be an input tag</span></span><br><span class="line">    client.expect.element(<span class="string">'#lst-ib'</span>).to.be.an(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expect element &lt;#lst-ib&gt; to be visible</span></span><br><span class="line">    client.expect.element(<span class="string">'#lst-ib'</span>).to.be.visible;</span><br><span class="line"></span><br><span class="line">    client.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>expect 是一个更灵活的，流畅的的断言定义，改进了assert，唯一的缺点是不能链式调用并且自定义消息也未被支持。</p>
<p>完整的expect断言，请参考：<a href="http://nightwatchjs.org/api/#expect" target="_blank" rel="external">API docs</a>，</p>
<h3 id="before_5BEach_5D_and_after_5BEach_5D__u94A9_u5B50"><a href="#before_5BEach_5D_and_after_5BEach_5D__u94A9_u5B50" class="headerlink" title="before[Each] and after[Each] 钩子"></a>before[Each] and after[Each] 钩子</h3><p>nightwatch提供了标准的 <code>before/after</code> and <code>beforeEach/afterEach</code>钩子在测试中。<br><code>before/after</code> 将分别的运行在测试套件的运行前或运行后，<code>beforeEach/afterEach</code>会在每一个testcase(test step)的前或后执行.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  before : <span class="function"><span class="keyword">function</span>(<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Setting up...'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  after : <span class="function"><span class="keyword">function</span>(<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Closing down...'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  beforeEach : <span class="function"><span class="keyword">function</span>(<span class="params">browser</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  afterEach : <span class="function"><span class="keyword">function</span>(<span class="params">browser</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"step one"</span> : <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"step two"</span> : <span class="function"><span class="keyword">function</span> (<span class="params">browser</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5F02_u6B65_before_5BEach_5D_and_after_5BEach_5D"><a href="#u5F02_u6B65_before_5BEach_5D_and_after_5BEach_5D" class="headerlink" title="异步 before[Each] and after[Each]"></a>异步 before[Each] and after[Each]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  beforeEach: <span class="function"><span class="keyword">function</span>(<span class="params">browser, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// performing an async operation</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// finished async duties</span></span><br><span class="line">      done();</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  afterEach: <span class="function"><span class="keyword">function</span>(<span class="params">browser, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// performing an async operation</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// finished async duties</span></span><br><span class="line">      done();</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="u5168_u5C40_u6269_u5C55_28External_Globals_29"><a href="#u5168_u5C40_u6269_u5C55_28External_Globals_29" class="headerlink" title="全局扩展(External Globals)"></a>全局扩展(External Globals)</h3><h2 id="u6D4B_u8BD5_u6267_u884C"><a href="#u6D4B_u8BD5_u6267_u884C" class="headerlink" title="测试执行"></a>测试执行</h2><h3 id="u8FD0_u884C_u6D4B_u8BD5_28test_Runner_29"><a href="#u8FD0_u884C_u6D4B_u8BD5_28test_Runner_29" class="headerlink" title="运行测试(test Runner)"></a>运行测试(test Runner)</h3><p>nightwatch包含一个命令行测试工具用来方便的运行测试和获取易用的输出。<br>这是一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nightwatch --test tests/demotest.js</span><br></pre></td></tr></table></figure></p>
<p>如果你使用<code>-g</code>安装<code>nightwatch</code>,你可以跳过这一步。<br>在您的项目中使用test Runner创建一个新文件调用nightwatch，并且添加这一行代码：</p>
<ul>
<li>for Linux and MacOSX<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"../bin/runner.js"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>设定权限<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x ngihtwatch</span><br></pre></td></tr></table></figure></p>
<ul>
<li>for windows<br>名称为nightwatch.js的文件，添加代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"../bin/runner.js"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>运行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node nightwatch.js</span><br></pre></td></tr></table></figure></p>
<h3 id="u547D_u4EE4_u884C_u53C2_u6570"><a href="#u547D_u4EE4_u884C_u53C2_u6570" class="headerlink" title="命令行参数"></a>命令行参数</h3><h3 id="u6D4B_u8BD5_u5206_u7EC4"><a href="#u6D4B_u8BD5_u5206_u7EC4" class="headerlink" title="测试分组"></a>测试分组</h3><p>nightwatch可以通过分组组织你的测试代码并且可以按需分组运行，分组测试测试相同子文件夹下的随哦有文件，文件夹名称就是分组的名称。<br>一个示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">lib/</span><br><span class="line">  ├── selenium-server-standalone.jar</span><br><span class="line">custom-commands/</span><br><span class="line">  ├── loginUser.js</span><br><span class="line">  ├── attachPicture.js</span><br><span class="line">tests/</span><br><span class="line">  ├── logingroup</span><br><span class="line">  |   ├── login_test.js</span><br><span class="line">  |   └── otherlogin_test.js</span><br><span class="line">  ├── addressbook</span><br><span class="line">  |   ├── addressbook_test.js</span><br><span class="line">  |   └── contact_test.js</span><br><span class="line">  ├── chat</span><br><span class="line">  |   ├── chatwindow_test.js</span><br><span class="line">  |   ├── chatmessage_test.js</span><br><span class="line">  |   └── otherchat_test.js</span><br><span class="line">  └── smoketests</span><br><span class="line">      ├── smoke_test.js</span><br><span class="line">      └── othersmoke_test.js</span><br></pre></td></tr></table></figure>
<p>如果想要只运行<code>smoketests</code>分组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --group smoketests</span><br></pre></td></tr></table></figure></p>
<p>同样： 如果想跳过分组<code>smoketests</code>运行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --skipgroup smoketests</span><br></pre></td></tr></table></figure></p>
<p>跳过多个分组的命令行代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --skipgroup addressbook, chat</span><br></pre></td></tr></table></figure></p>
<h3 id="u6D4B_u8BD5_u6807_u7B7E_28test_tag_29"><a href="#u6D4B_u8BD5_u6807_u7B7E_28test_tag_29" class="headerlink" title="测试标签(test tag)"></a>测试标签(test tag)</h3><p>你也同样可以基于标签有选择性运行测试目标，即可以只运行一个文件中的一部分。这样一个测试可能拥有多个标签。<br>标签可以通过<code>@ tags</code>属性添加到测试模块:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'@tags'</span>: [<span class="string">'login'</span>, <span class="string">'sanity'</span>],</span><br><span class="line">  <span class="string">'demo login test'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// test code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>选择一个标签运行，使用<code>--tag</code>命令行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --tag login</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定多个标签运行：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --tag login --tag something_else</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳过指定的标签运行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --skiptags login</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳过多个tag运行测试</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch --skiptags login,something_else</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u7981_u6B62_u6D4B_u8BD5"><a href="#u7981_u6B62_u6D4B_u8BD5" class="headerlink" title="禁止测试"></a>禁止测试</h3><p>为了防止一个测试模块运行，简单的设置<code>disabled</code>属性为<code>true</code>,就可以做到：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'@disabled'</span>: <span class="literal">true</span>, <span class="comment">// This will prevent the test module from running.</span></span><br><span class="line"></span><br><span class="line">  <span class="string">'sample test'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// test code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这可能是有用的，如果你不想运行已知的有错的测试。</p>
<h3 id="u5E76_u884C_u8FD0_u884C"><a href="#u5E76_u884C_u8FD0_u884C" class="headerlink" title="并行运行"></a>并行运行</h3><p>从v0.5开始，nightwatch支持测试的并行运行，这里是通过在命令行中指定多个环境实现的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nightwatch -e <span class="keyword">default</span>,chrome</span><br></pre></td></tr></table></figure></p>
<p>并行的运行两种环境default和chrome</p>
<h3 id="u7EC8_u7AEF_u8F93_u51FA"><a href="#u7EC8_u7AEF_u8F93_u51FA" class="headerlink" title="终端输出"></a>终端输出</h3><p>每一个环境都是单独的子进程（<code>child_process</code>）中运行但是输出将被发送到主进程中。、<br>为了使输出更容易阅读，nightwatch默认缓冲输出每一个子进程的输出直到子进程运行结束，并且通过浏览器环境分组。</p>
<pre><code>If you&apos;d like to disable the output buffering and see the output from each child process as it is sent to stdout, simply set the property &quot;live_output&quot; : true on the top level in your nightwatch.json (e.g. after selenium).

You can create a separate environment per browser (by chaining desiredCapabilities) and then run them in parallel. In addition, using the filter and exclude options tests can be split per environment in order to be ran in parallel.
</code></pre><h3 id="via_workers"><a href="#via_workers" class="headerlink" title="via workers"></a>via workers</h3><h3 id="u4F7F_u7528Grunt"><a href="#u4F7F_u7528Grunt" class="headerlink" title="使用Grunt"></a>使用Grunt</h3><h3 id="u4F7F_u7528Mocha"><a href="#u4F7F_u7528Mocha" class="headerlink" title="使用Mocha"></a>使用Mocha</h3><h4 id="u53EF_u4EE5_u901A_u8FC7_u4E24_u79CD_u65B9_u5F0F_u4F7F_u7528mocha"><a href="#u53EF_u4EE5_u901A_u8FC7_u4E24_u79CD_u65B9_u5F0F_u4F7F_u7528mocha" class="headerlink" title="可以通过两种方式使用mocha"></a>可以通过两种方式使用mocha</h4><ul>
<li>from NightWatch<br>可以在nightwatch.json中通过指定<code>test_runner</code>来使Mocha做为内置的执行。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"test_runner"</span> : &#123;</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"mocha"</span>,</span><br><span class="line">    <span class="string">"options"</span> : &#123;</span><br><span class="line">      <span class="string">"ui"</span> : <span class="string">"tdd"</span>,</span><br><span class="line">      <span class="string">"reporter"</span> : <span class="string">"list"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>OR<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"test_runner"</span> : <span class="string">"mocha"</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个完整的例子在这：<a href="https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options" target="_blank" rel="external">here</a></p>
<p><code>test_runner</code>操作通用可以用来指定外界等级[？？]<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"test_settings"</span> : &#123;</span><br><span class="line">    <span class="string">"mocha_tests"</span> : &#123;</span><br><span class="line">      <span class="string">"test_runner"</span> : &#123;</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"mocha"</span>,</span><br><span class="line">        <span class="string">"options"</span> : &#123;</span><br><span class="line">          <span class="string">"ui"</span> : <span class="string">"tdd"</span>,</span><br><span class="line">          <span class="string">"reporter"</span> : <span class="string">"list"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个示例：<br>使用mocha编写的测试同样可以使用NightWatch语句。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Google demo test for Mocha'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'with Nightwatch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    before(<span class="function"><span class="keyword">function</span>(<span class="params">client, done</span>) </span>&#123;</span><br><span class="line">      done();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    after(<span class="function"><span class="keyword">function</span>(<span class="params">client, done</span>) </span>&#123;</span><br><span class="line">      client.end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        done();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    afterEach(<span class="function"><span class="keyword">function</span>(<span class="params">client, done</span>) </span>&#123;</span><br><span class="line">      done();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params">client, done</span>) </span>&#123;</span><br><span class="line">      done();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'uses BDD to run the Google simple test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">      client</span><br><span class="line">        .url(<span class="string">'http://google.com'</span>)</span><br><span class="line">        .expect.element(<span class="string">'body'</span>).to.be.present.before(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      client.setValue(<span class="string">'input[type=text]'</span>, [<span class="string">'nightwatch'</span>, client.Keys.ENTER])</span><br><span class="line">        .pause(<span class="number">1000</span>)</span><br><span class="line">        .assert.containsText(<span class="string">'#main'</span>, <span class="string">'Night Watch'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<pre><code>当使用mocha测试运行的时候，nightwatch的一写cli不是有效的，比如：`--retries`, `--suiteRetries`, `--reporter`
</code></pre><ul>
<li>使用标准mocha<br>在NightWatch中使用标准mocha同样是可能的，虽然会多一点代码引用并且你需要管理Selenium 服务。</li>
</ul>
<p>一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nightwatch = <span class="built_in">require</span>(<span class="string">'nightwatch'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Github'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> client = nightwatch.initClient(&#123;</span><br><span class="line">    silent : <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> browser = client.api();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">99999999</span>);</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    browser.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforeAll'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    browser.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'beforeEach'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.start(done);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  it(<span class="string">'Demo test GitHub'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    browser</span><br><span class="line">      .url(<span class="string">'https://github.com/nightwatchjs/nightwatch'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'body'</span>, <span class="number">5000</span>)</span><br><span class="line">      .assert.title(<span class="string">'nightwatchjs/nightwatch · GitHub'</span>)</span><br><span class="line">      .waitForElementVisible(<span class="string">'body'</span>, <span class="number">1000</span>)</span><br><span class="line">      .assert.visible(<span class="string">'.container .breadcrumb a span'</span>)</span><br><span class="line">      .assert.containsText(<span class="string">'.container .breadcrumb a span'</span>, <span class="string">'nightwatch'</span>, <span class="string">'Checking project title is set to nightwatch'</span>);</span><br><span class="line"></span><br><span class="line">    client.start(done);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browser.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'afterEach'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    browser.end(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'afterAll'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.start(done);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="u5904_u7406_u9875_u9762_u5BF9_u8C61"><a href="#u5904_u7406_u9875_u9762_u5BF9_u8C61" class="headerlink" title="处理页面对象"></a>处理页面对象</h2><h3 id="u4F7F_u7528_u9875_u9762_u5BF9_u8C61"><a href="#u4F7F_u7528_u9875_u9762_u5BF9_u8C61" class="headerlink" title="使用页面对象"></a>使用页面对象</h3><p>页面对象的方法是通过包装一个Web应用程序的页面或页面片段转换为对象的一个流行的端到端的测试模式。页面对象的目的是让软件客户端做任何事情，看到任何一个人可以被抽象掉访问和操作的页面所需的底层的HTML动作。</p>
<p>一个全面的页面对象介绍可以看这里： <a href="http://martinfowler.com/bliki/PageObject.html" target="_blank" rel="external">pages objects</a></p>
<pre><code>As of version 0.7 Nightwatch provides an enhanced and more powerful interface for creating page objects, significantly improved over the previous support. Page objects created prior to v0.7 will still continue to work however we recommend upgrading to the new version. To use the new version, your page object must contain either the elements or sections property. Otherwise, Nightwatch will defer to the old.
</code></pre><ul>
<li>配置页面对象（Page Objects）<br>要创建一个页面对象简单地创建具有描述页面属性的对象。每个页面对象应设在一个单独的文件，位于一个指定的文件夹。 Nightwatch读取文件夹（或文件夹）在<code>page_objects_path</code>配置属性指定的页面对象。</li>
</ul>
<p><code>page_objects_path</code>属性同样可以是一个文件夹的数组，允许你在更小的分组中合乎逻辑的分割对象。</p>
<ul>
<li>Url 属性<br>你可以随意的添加<code>url</code>属性用来指定页面的url地址， 访问到页面之后，你可以在这个页面对象中调用原生的方法。<br>URL通常定义为一个字符串：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  url: <span class="string">'http://google.com'</span>,</span><br><span class="line">  elements: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>他也可以通过一个function被动态的定义，一个例子就是支持不同的测试地址，因此允许这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  url: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.api.launchUrl + <span class="string">'/login'</span>; </span><br><span class="line">  &#125;,</span><br><span class="line">  elements: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5B9A_u4E49dom__u5143_u7D20"><a href="#u5B9A_u4E49dom__u5143_u7D20" class="headerlink" title="定义dom 元素"></a>定义dom 元素</h3><p>大多数时候， 你会定义<code>elements</code>在你的页面上然后在测试页面通过命令或者断言。<br>这样使你的所有元素都在一个地方定义的元素属性变得简单。特别是在大型集成测试，使用<code>elements</code>将会长期的使代码变的干净。</p>
<p>Switching between css and xpath locate strategies is handled internally so you don’t need to call useXpath and useCss in your tests. The default locateStrategy is css but you can also specify xpath:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  elements: &#123;</span><br><span class="line">    searchBar: &#123; </span><br><span class="line">      selector: <span class="string">'input[type=text]'</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    submit: &#123; </span><br><span class="line">      selector: <span class="string">'//[@name="q"]'</span>, </span><br><span class="line">      locateStrategy: <span class="string">'xpath'</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Or if you’re creating elements with the same locate strategy as is default, you can use the shorthand:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  elements: &#123;</span><br><span class="line">    searchBar: <span class="string">'input[type=text]'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用<code>elements</code>属性允许你查询<code>element</code>通过<code>@</code>前缀，当调用<code>element</code>命令和断言时，而不用选择器。<br>Optionally, you can define an array of objects:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sharedElements = &#123;</span><br><span class="line">  mailLink: <span class="string">'a[href*="mail.google.com"]'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  elements: [</span><br><span class="line">    sharedElements,</span><br><span class="line">    &#123; searchBar: <span class="string">'input[type=text]'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Putting elements and url together, say you have the following defined above saved as a google.js file:<br>同时使用 <code>elements</code> 和<code>url</code>，有一个<code>google.js</code>的参考例子，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  url: <span class="string">'http://google.com'</span>,</span><br><span class="line">  elements: &#123;</span><br><span class="line">    searchBar: &#123; </span><br><span class="line">      selector: <span class="string">'input[type=text]'</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    submit: &#123; </span><br><span class="line">      selector: <span class="string">'//[@name="q"]'</span>, </span><br><span class="line">      locateStrategy: <span class="string">'xpath'</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>在测试中使用方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'Test'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> google = client.page.google();</span><br><span class="line"></span><br><span class="line">    google.navigate()</span><br><span class="line">      .assert.title(<span class="string">'Google'</span>)</span><br><span class="line">      .assert.visible(<span class="string">'@searchBar'</span>)</span><br><span class="line">      .setValue(<span class="string">'@searchBar'</span>, <span class="string">'nightwatch'</span>)</span><br><span class="line">      .click(<span class="string">'@submit'</span>);</span><br><span class="line"></span><br><span class="line">    client.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5B9A_u4E49_u5207_u7247"><a href="#u5B9A_u4E49_u5207_u7247" class="headerlink" title="定义切片"></a>定义切片</h3><p>Sometimes it is useful to define sections of a page. Sections do 2 things:</p>
<p>Provide a level of namespacing under the page<br>Provide element-level nesting so that any element defined within a section is a descendant of its parent section in the DOM<br>You can create sections using the sections property:<br>有时需要在页面中定义切片： 切片只做两件事情：</p>
<blockquote>
<ul>
<li>在页面下放提供一个命名空间</li>
<li>提供元素级别的嵌套，这样任何一个节点都能被定义在切片内作为dom的子元素</li>
</ul>
</blockquote>
<p> 你可以使用<code>sections</code>属性创建切片。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  sections: &#123;</span><br><span class="line">    menu: &#123;</span><br><span class="line">      selector: <span class="string">'#gb'</span>,</span><br><span class="line">      elements: &#123;</span><br><span class="line">        mail: &#123; </span><br><span class="line">          selector: <span class="string">'a[href="mail"]'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        images: &#123;</span><br><span class="line">          selector: <span class="string">'a[href="imghp"]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后这样来测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'Test'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> google = client.page.google();</span><br><span class="line">    google.expect.section(<span class="string">'@menu'</span>).to.be.visible;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> menuSection = google.section.menu;</span><br><span class="line">    menuSection.expect.element(<span class="string">'@mail'</span>).to.be.visible;</span><br><span class="line">    menuSection.expect.element(<span class="string">'@images'</span>).to.be.visible;</span><br><span class="line"></span><br><span class="line">    menuSection.click(<span class="string">'@mail'</span>);</span><br><span class="line"></span><br><span class="line">    client.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<pre><code>Note that every command and assertion on a section (other than `expect` assertions) returns that section for chaining. If desired, you can nest sections under other sections for complex DOM structures.
</code></pre><h3 id="u6DFB_u52A0_u81EA_u5B9A_u4E49_u547D_u4EE4"><a href="#u6DFB_u52A0_u81EA_u5B9A_u4E49_u547D_u4EE4" class="headerlink" title="添加自定义命令"></a>添加自定义命令</h3><p>你可以通过<code>commands</code>属性在页面中添加命令，这是一个有用的方法来封装逻辑页面，<br>Nightwatch will call the command on the context of the page or section. Client commands like pause are available via this.api. For chaining, each function should return the page object or section.</p>
<p>In this case, a command is used to encapsulate logic for clicking the submit button:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> googleCommands = &#123;</span><br><span class="line">  submit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.api.pause(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.waitForElementVisible(<span class="string">'@submitButton'</span>, <span class="number">1000</span>)</span><br><span class="line">      .click(<span class="string">'@submitButton'</span>)</span><br><span class="line">      .waitForElementNotPresent(<span class="string">'@submitButton'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  commands: [googleCommands],</span><br><span class="line">  elements: &#123;</span><br><span class="line">    searchBar: &#123;</span><br><span class="line">      selector: <span class="string">'input[type=text]'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    submitButton: &#123;</span><br><span class="line">      selector: <span class="string">'button[name=btnG]'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这样测试是简单的，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'Test'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> google = client.page.google();</span><br><span class="line">    google.setValue(<span class="string">'@searchBar'</span>, <span class="string">'nightwatch'</span>)</span><br><span class="line">      .submit();</span><br><span class="line"></span><br><span class="line">    client.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="u6269_u5C55NightWatch"><a href="#u6269_u5C55NightWatch" class="headerlink" title="扩展NightWatch"></a>扩展NightWatch</h2><h2 id="u4F7F_u7528NightWatch_u8FDB_u884C_u5355_u5143_u6D4B_u8BD5"><a href="#u4F7F_u7528NightWatch_u8FDB_u884C_u5355_u5143_u6D4B_u8BD5" class="headerlink" title="使用NightWatch进行单元测试"></a>使用NightWatch进行单元测试</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7EFC_u8FF0"><a href="#u7EFC_u8FF0" class="headerlink" title="综述"></a>综述</h2><h3 id="u4EC0_u4E48_u662FNightWatch_3F"><a href="#u4EC0]]>
    </summary>
    
      <category term="集成测试，验收测试，自动化测试" scheme="http://zuoyanart.github.io/tags/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%EF%BC%8C%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动端图片自动适配]]></title>
    <link href="http://zuoyanart.github.io/2016/04/28/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E9%80%82%E9%85%8D/"/>
    <id>http://zuoyanart.github.io/2016/04/28/移动端图片自动适配/</id>
    <published>2016-04-28T08:24:28.000Z</published>
    <updated>2016-04-28T08:50:47.733Z</updated>
    <content type="html"><![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>大家知道Retina屏幕可能会用到2倍或者3倍的图片， 其实这个一直没有特别好的解决方案，直到webkit内核支持css4的bgackground-image的新规范草案image-set。添加上-webkit前缀，webkit内核就可以解析该属性。</p>
<h2 id="u8BED_u6CD5_u4ECB_u7ECD"><a href="#u8BED_u6CD5_u4ECB_u7ECD" class="headerlink" title="语法介绍"></a>语法介绍</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">selector &#123;</span><br><span class="line">  background-image: url(no-image-set.png);</span><br><span class="line">  background: image-set(url(foo-lowres.png) <span class="number">1</span>x,url(foo-highres.png) <span class="number">2</span>x) center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在不支持image-set的浏览器下，会解析background-image属性<br>在支持image-set的浏览器下，如果是普通屏，浏览器会选择1X的背景图，在Retina屏幕下，浏览器会自动选择2X图或者3X图</p>
</blockquote>
<p>世界清静了。</p>
<h2 id="u96EA_u78A7_u4F7F_u7528"><a href="#u96EA_u78A7_u4F7F_u7528" class="headerlink" title="雪碧使用"></a>雪碧使用</h2><pre><code>2x图片必须是1x图片的精确2倍，包括间隙。不需要写background-size,浏览器会自动处理。

backgorund-positon只需写一遍，相对位置按照1x图来写即可
</code></pre><p>建议此处处理结合框架使用，比如我一直使用fis自动雪碧</p>
<h2 id="u6D4F_u89C8_u5668_u517C_u5BB9_u6027"><a href="#u6D4F_u89C8_u5668_u517C_u5BB9_u6027" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p><a href="http://caniuse.com/#search=image-set" title="image-set" target="_blank" rel="external">http://caniuse.com/#search=image-set</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h2><p>大家知道Retina屏幕可能会用到2倍或者3倍的图片， 其实这个一直没有特别好的解决方案，直到webki]]>
    </summary>
    
      <category term="app" scheme="http://zuoyanart.github.io/tags/app/"/>
    
      <category term="webapp" scheme="http://zuoyanart.github.io/tags/webapp/"/>
    
      <category term="移动端" scheme="http://zuoyanart.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于fis的前端模块化和工程化方案]]></title>
    <link href="http://zuoyanart.github.io/2016/01/07/%E5%9F%BA%E4%BA%8Efis%E7%9A%84%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8C%E5%B7%A5%E7%A8%8B%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>http://zuoyanart.github.io/2016/01/07/基于fis的前端模块化和工程化方案/</id>
    <published>2016-01-07T10:20:59.000Z</published>
    <updated>2016-03-08T06:29:43.208Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u7AEF_u6784_u5EFA_u5DE5_u5177"><a href="#u524D_u7AEF_u6784_u5EFA_u5DE5_u5177" class="headerlink" title="前端构建工具"></a>前端构建工具</h2><p>面对日益复杂的前端环境以及前端技术、node技术的高速发展，前端的开发也越来越工程化，体系化，也就出现了前端自动化构建维护工具。他们完成的任务目标基本是：</p>
<blockquote>
<ul>
<li>js，css,图片的自动压缩合并（图片也即是是自动sprite）</li>
<li>js，css,图片自动添加域名（静态文件的分布式部署）</li>
<li>js，css,图片自动添加md5或版本号（缓存管理）</li>
<li>自动监听文件变化 （自动编译，方便调试）</li>
<li>sass/less/coffee等的自动编译 （方便扩展各种插件）</li>
<li>支持amd/cmd的模块开发，可自动文件依赖 （js模块化开发）</li>
<li>可以部署文件 （自动部署）</li>
<li>网页自动刷新 （方便调试）</li>
<li>实时编译 （方便调试）</li>
</ul>
</blockquote>
<p>成熟的前端构建工具也有很多，比如：Gulp.js，Grunt，webpark等等，其他构建工具本人使用不多，本文主要是对fis的前端工程化和模块化的使用做详细介绍</p>
<h2 id="u5173_u4E8Efis"><a href="#u5173_u4E8Efis" class="headerlink" title="关于fis"></a>关于fis</h2><p>fis是百度研发的一套前端构建工具，拥有丰富的脚手架和组件仓库。因为fis是本人接触的最早的前端构建工具，所以一直沿用到了至今。</p>
<pre><code>注： 本文针对的版本号是fis3
</code></pre><h2 id="fis_u7684_u524D_u7AEF_u5DE5_u7A0B_u5316_u548C_u6A21_u5757_u5316_u57FA_u7840_u63D2_u4EF6"><a href="#fis_u7684_u524D_u7AEF_u5DE5_u7A0B_u5316_u548C_u6A21_u5757_u5316_u57FA_u7840_u63D2_u4EF6" class="headerlink" title="fis的前端工程化和模块化基础插件"></a>fis的前端工程化和模块化基础插件</h2><h3 id="1-_u81EA_u52A8_u6253_u5305_u5408_u5E76_u63D2_u4EF6"><a href="#1-_u81EA_u52A8_u6253_u5305_u5408_u5E76_u63D2_u4EF6" class="headerlink" title="1.自动打包合并插件"></a>1.自动打包合并插件</h3><h4 id="fis_u914D_u7F6E"><a href="#fis_u914D_u7F6E" class="headerlink" title="fis配置"></a>fis配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//打包与css sprite基础配置</span></span><br><span class="line">fis.match(<span class="string">'::packager'</span>, &#123;</span><br><span class="line">    <span class="comment">// npm install -g fis3-postpackager-loader</span></span><br><span class="line">    postpackager: fis.plugin(<span class="string">'loader'</span>, &#123;</span><br><span class="line">        resourceType: <span class="string">'mod'</span>,</span><br><span class="line">        obtainScript: <span class="literal">true</span>,</span><br><span class="line">        allInOne: <span class="literal">true</span>,</span><br><span class="line">        useInlineMap: <span class="literal">true</span>, <span class="comment">// 资源映射表内嵌</span></span><br><span class="line">    &#125;),</span><br><span class="line">    packager: fis.plugin(<span class="string">'map'</span>, &#123;<span class="comment">//常用脚本和css的合并，此不参与到页面的自动合并</span></span><br><span class="line">      useTrack: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'pkg/base.js'</span>: [<span class="string">'/modules/jquery/*.js'</span>, <span class="string">'/modules/layer/*.js'</span>, <span class="string">'/modules/pizzalayer/*.js'</span>, <span class="string">'/modules/pizzatools/*.js'</span>],</span><br><span class="line">      <span class="string">'pkg/base-a.js'</span>: [<span class="string">'/widget/globle/*.js'</span>, <span class="string">'/modules/pizzaui/pizza.ui.js'</span>, <span class="string">'/site/common/common.js'</span>],</span><br><span class="line">      <span class="string">'pkg/base.css'</span>: [<span class="string">'/css/pizza.css'</span>, <span class="string">'/css/iconfont.css'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    spriter: fis.plugin(<span class="string">'csssprites'</span>, &#123;<span class="comment">//css的雪碧合并配置</span></span><br><span class="line">        layout: <span class="string">'matrix'</span>,</span><br><span class="line">        margin: <span class="string">'15'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="u4F5C_u7528"><a href="#u4F5C_u7528" class="headerlink" title="作用"></a>作用</h4><p>将html中分散的静态资源进行自动合并打包</p>
<h4 id="u5E94_u7528_u4E3E_u4F8B_uFF1A"><a href="#u5E94_u7528_u4E3E_u4F8B_uFF1A" class="headerlink" title="应用举例："></a>应用举例：</h4><p>原始文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/css/pizza.css"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"/css/iconfont.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"/site/index/index/index.css"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>转换后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"/pkg/base.css"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/pkg/view/home/article_index.html_aio.css"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>可以看到fis会自动合并多个css到同一个文件里，这个合并不仅仅适用于css，也同样适用与js，并且将自动把css文件放入header头，js放在body结束前，有了这个功能也就具备的模块化开发的大前提</p>
<h3 id="fis_u7684include_u529F_u80FD"><a href="#fis_u7684include_u529F_u80FD" class="headerlink" title="fis的include功能"></a>fis的include功能</h3><h4 id="fis_u914D_u7F6E-1"><a href="#fis_u914D_u7F6E-1" class="headerlink" title="fis配置"></a>fis配置</h4><p>默认支持，无须插件</p>
<h4 id="u4F5C_u7528-1"><a href="#u4F5C_u7528-1" class="headerlink" title="作用"></a>作用</h4><p>大家在使用模板引擎的时候，肯定是少不了include功能的， 即公共部分的文件引用。fis同样支持这个功能，而且借助与自动打包功能，include功能的作用也被放大的很多.(fis支持多级include)</p>
<h4 id="u5E94_u7528_u4E3E_u4F8B"><a href="#u5E94_u7528_u4E3E_u4F8B" class="headerlink" title="应用举例"></a>应用举例</h4><h5 id="u4E3B_u6A21_u677F_u6587_u4EF6"><a href="#u4E3B_u6A21_u677F_u6587_u4EF6" class="headerlink" title="主模板文件"></a>主模板文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"/css/mcren.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"/site/index/index/index.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/lib/mod.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"import"</span> <span class="attribute">href</span>=<span class="value">"/widget/header-small/header.html?__inline"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="u6B21_u6A21_u7248_u6587_u4EF6_uFF08header-small/header-html_uFF09"><a href="#u6B21_u6A21_u7248_u6587_u4EF6_uFF08header-small/header-html_uFF09" class="headerlink" title="次模版文件（header-small/header.html）"></a>次模版文件（header-small/header.html）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"./header.css"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"import"</span> <span class="attribute">href</span>=<span class="value">"../loginstate/loginstate.html?__inline"</span>&gt;</span><span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>主页<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> jsfunc = <span class="built_in">require</span>(<span class="string">'jsfunc/jsfunc'</span>);</span><br><span class="line">    jsfunc.init();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="u8F6C_u6362_u540E"><a href="#u8F6C_u6362_u540E" class="headerlink" title="转换后"></a>转换后</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/pkg/mcren_7636e.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"loginstate"</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/space"</span>&gt;</span>左盐<span class="tag">&lt;/<span class="title">a</span>&gt;</span> | <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span>&gt;</span>退出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"member.jpg"</span> <span class="attribute">id</span>=<span class="value">"avatar"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>名场<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--省略的html代码--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/lib/mod.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> jsfunc = <span class="built_in">require</span>(<span class="string">'jsfunc/jsfunc'</span>);</span><br><span class="line">    jsfunc.init();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h4><p>可以看到，经过fis处理后，本来应该分散的css被组合放进了head头里，js被放在了body结束前，模板的html代码也正常引入了进去。</p>
<blockquote>
<p>另外大家可以看到我模块的划分，header模块的html是引入css的，也就是说模块与模块之间以及模块和主体页面之间的css都是独立的，这样充分解耦，可以有效的解决css的维护问题，</p>
</blockquote>
<h3 id="ejs_u5206_u6790_u80FD_u529B"><a href="#ejs_u5206_u6790_u80FD_u529B" class="headerlink" title="ejs分析能力"></a>ejs分析能力</h3><h4 id="fis_u914D_u7F6E-2"><a href="#fis_u914D_u7F6E-2" class="headerlink" title="fis配置"></a>fis配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//npm install fis-parser-ejs</span></span><br><span class="line">fis.match(<span class="string">"**/*.ejs"</span>, &#123;</span><br><span class="line">        parser: fis.plugin(<span class="string">'ejs'</span>),</span><br><span class="line">        isJsLike: <span class="literal">true</span>,</span><br><span class="line">        release: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="u4F5C_u7528-2"><a href="#u4F5C_u7528-2" class="headerlink" title="作用"></a>作用</h4><p>大家知道，写js打印html字符串到页面的时候，如果在js里面串接html字符串是一种很难受的体验，所以fis也就有了这个插件，这个插件可以给js方法添加引用ejs模板的能力，这里ejs的使用方法和原生的完全兼容</p>
<h4 id="u5E94_u7528_u4E3E_u4F8B-1"><a href="#u5E94_u7528_u4E3E_u4F8B-1" class="headerlink" title="应用举例"></a>应用举例</h4><h5 id="js_u51FD_u6570"><a href="#js_u51FD_u6570" class="headerlink" title="js函数"></a>js函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ejsEx</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> tpl = __inline(<span class="string">'comment.ejs'</span>);</span><br><span class="line">	<span class="keyword">var</span> s = tpl(&#123;</span><br><span class="line">		title: <span class="string">"我的ejs模板"</span></span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ejs_u6A21_u677F"><a href="#ejs_u6A21_u677F" class="headerlink" title="ejs模板"></a>ejs模板</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">title</span>%&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="u8F93_u51FA"><a href="#u8F93_u51FA" class="headerlink" title="输出"></a>输出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;我的ejs模板&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="u6BCD_u7248_u9875_u652F_u6301"><a href="#u6BCD_u7248_u9875_u652F_u6301" class="headerlink" title="母版页支持"></a>母版页支持</h3><h4 id="fis_u914D_u7F6E-3"><a href="#fis_u914D_u7F6E-3" class="headerlink" title="fis配置"></a>fis配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//npm install fis-parser-ejs</span></span><br><span class="line"><span class="comment">//page下面的页面发布时去掉page文件夹</span></span><br><span class="line"><span class="comment">//这里其实是使用了swig的母版页功能，然后通过fis编译成html页面的</span></span><br><span class="line">fis.match(<span class="regexp">/^\/view\/(.*)$/i</span>, &#123;</span><br><span class="line">        parser: fis.plugin(<span class="string">'swigt'</span>),</span><br><span class="line">        useCache: <span class="literal">false</span>,</span><br><span class="line">        release: <span class="string">'/$&amp;'</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="u4F5C_u7528-3"><a href="#u4F5C_u7528-3" class="headerlink" title="作用"></a>作用</h4><p>母版页的使用场景在后台管理页面里特别常见，在后台里总是头尾和左侧管理菜单栏是不变的，其他位置在变化，如果有母版页功能支持，那么开发这些页面就变得轻而易举</p>
<h4 id="u5E94_u7528_u4E3E_u4F8B-2"><a href="#u5E94_u7528_u4E3E_u4F8B-2" class="headerlink" title="应用举例"></a>应用举例</h4><h5 id="html_u6BCD_u677F"><a href="#html_u6BCD_u677F" class="headerlink" title="html母板"></a>html母板</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"import"</span> <span class="attribute">href</span>=<span class="value">"/widget/meta/meta.html?__inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/site/common/common.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/site/home/base.css"</span> &gt;</span></span><br><span class="line">    &#123;% block css %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-pizza"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>Pizza Admin<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"user-nav"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-person"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span> <span class="attribute">id</span>=<span class="value">"loginout"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-loginout"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>退出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"search"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"search"</span> <span class="attribute">id</span>=<span class="value">"searchkw"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"sidebar"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>主页<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"submenu"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-article"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>信息管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/tree"</span>&gt;</span>节点管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/article"</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/module"</span>&gt;</span>模块管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"submenu"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>系统管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/user"</span>&gt;</span>管理员管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!-- &lt;li&gt;&lt;a href="/article"&gt;系统设置&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">					&lt;li&gt;&lt;a href="/module"&gt;&lt;/a&gt;&lt;/li&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></span><br><span class="line">		&#123;% block content %&#125;&#123;%endblock%&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row-fluid"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="keyword">var</span> globleConfig = <span class="built_in">require</span>(<span class="string">'globle/globle'</span>);</span><br><span class="line">  globleConfig.init();</span><br><span class="line">	<span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">'common/common'</span>);</span><br><span class="line">	common.init();</span><br><span class="line">	</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    &#123;% block js %&#125;&#123;%endblock%&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="html_u6A21_u677F"><a href="#html_u6A21_u677F" class="headerlink" title="html模板"></a>html模板</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">"../master/index.html"</span> %&#125; &#123;% block css%&#125; &#123;% endblock %&#125; &#123;% block title %&#125; 文章管理 &#123;% endblock %&#125;</span><br><span class="line">&lt;!----&gt;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"checkgroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"checkall"</span> <span class="attribute">name</span>=<span class="value">"checkall"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"checkall"</span> <span class="attribute">class</span>=<span class="value">"check-all"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>全选</span><br><span class="line">  <span class="tag">&lt;/<span class="title">label</span>&gt;</span>|<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/home/user/edit"</span>&gt;</span>添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>|<span class="tag">&lt;<span class="title">em</span> <span class="attribute">class</span>=<span class="value">"pass"</span>&gt;</span>冻结<span class="tag">&lt;/<span class="title">em</span>&gt;</span>|<span class="tag">&lt;<span class="title">em</span> <span class="attribute">class</span>=<span class="value">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list"</span> <span class="attribute">id</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'home/user/user'</span>);</span><br><span class="line">  user.init();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="u751F_u6210"><a href="#u751F_u6210" class="headerlink" title="生成"></a>生成</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"renderer"</span> <span class="attribute">content</span>=<span class="value">"webkit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span> 文章管理 <span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"screen"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> <span class="attribute">href</span>=<span class="value">"/static/pkg/base.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/static/pkg/view/home/user_index.html_aio.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-pizza"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>Pizza Admin<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"user-nav"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-person"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span> <span class="attribute">id</span>=<span class="value">"loginout"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-loginout"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>退出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"search"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"search"</span> <span class="attribute">id</span>=<span class="value">"searchkw"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"sidebar"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>主页<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"submenu"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-article"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>信息管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/tree"</span>&gt;</span>节点管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/article"</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/module"</span>&gt;</span>模块管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"submenu"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>系统管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/user"</span>&gt;</span>管理员管理<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!-- &lt;li&gt;&lt;a href="/article"&gt;系统设置&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">					&lt;li&gt;&lt;a href="/module"&gt;&lt;/a&gt;&lt;/li&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"checkgroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"checkall"</span> <span class="attribute">name</span>=<span class="value">"checkall"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"checkall"</span> <span class="attribute">class</span>=<span class="value">"check-all"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>全选</span><br><span class="line">  <span class="tag">&lt;/<span class="title">label</span>&gt;</span>|<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/home/user/edit"</span>&gt;</span>添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>|<span class="tag">&lt;<span class="title">em</span> <span class="attribute">class</span>=<span class="value">"pass"</span>&gt;</span>冻结<span class="tag">&lt;/<span class="title">em</span>&gt;</span>|<span class="tag">&lt;<span class="title">em</span> <span class="attribute">class</span>=<span class="value">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list"</span> <span class="attribute">id</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row-fluid"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> <span class="attribute">src</span>=<span class="value">"/static/lib/mod.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/static/pkg/base.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/static/pkg/base-a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/static/site/home/user/user.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="keyword">var</span> globleConfig = <span class="built_in">require</span>(<span class="string">'globle/globle'</span>);</span><br><span class="line">  globleConfig.init();</span><br><span class="line">	<span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">'common/common'</span>);</span><br><span class="line">	common.init();</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'home/user/user'</span>);</span><br><span class="line">  user.init();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> <span class="attribute">src</span>=<span class="value">"http://192.168.1.134:8132/livereload.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="u76EE_u5F55_u7ED3_u6784"><a href="#u76EE_u5F55_u7ED3_u6784" class="headerlink" title="目录结构"></a>目录结构</h2><p>上面已经介绍了fis的模块化基础能力，现在开始实践fis的模块化开发能力。当然fis的amd/cmd，域名添加等等基础功能，这里没有叙述，您可以自行上官网查看学习</p>
<blockquote>
<p>根目录</p>
<blockquote>
<p>css //less生成的css文件<br>font //字体图标文件<br>img //公共图片<br>less<br>lib //系统类库<br>modules //常用的module</p>
<blockquote>
<p>jquery<br>laydate<br>layer<br>pizzalayer<br>pizzatools //网站工具类<br>pizzaui //ui组件<br>store //本地化插件<br>xss //xss过滤插件</p>
</blockquote>
<p>site //非模块的css，js<br>views //网页模板文件<br>widget //模块</p>
<blockquote>
<p>head //头部模块<br>footer //底部模块<br>nav //菜单模块</p>
</blockquote>
<p>fis-conf.js //fis配置文件</p>
</blockquote>
</blockquote>
<p>因为我的技术构架是： 前端 + nodejs + rest api，所以使用这种目录结构，用户可根据自己的项目目录自由更改。</p>
<h3 id="u8BF4_u660E-1"><a href="#u8BF4_u660E-1" class="headerlink" title="说明"></a>说明</h3><h4 id="modules_u76EE_u5F55"><a href="#modules_u76EE_u5F55" class="headerlink" title="modules目录"></a>modules目录</h4><p>modules都是工具类，只包含js，<br>目录结构为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---根目录</span><br><span class="line">----modules</span><br><span class="line">-----jquery</span><br><span class="line">------jquery-<span class="number">1.11</span><span class="number">.3</span>.min.js</span><br></pre></td></tr></table></figure></p>
<p>引用方式为：require(‘文件夹名字’)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="widget_u76EE_u5F55"><a href="#widget_u76EE_u5F55" class="headerlink" title="widget目录"></a>widget目录</h4><p>widget目录都是网站模块，可包含js,css,html,图片<br>目录结构为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---根目录</span><br><span class="line">----widget</span><br><span class="line">-----loginstate</span><br><span class="line">------loginstate.less</span><br><span class="line">------loginstate.js</span><br><span class="line">------loginstate.html</span><br><span class="line">------loginstate.jpg</span><br></pre></td></tr></table></figure></p>
<p>引用方式为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"import"</span> href=<span class="string">"/widget/loginstate/loginstate.html?__inline"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="u4E00_u4E2A_u6A21_u5757_u7684_u4EE3_u7801_u793A_u4F8B"><a href="#u4E00_u4E2A_u6A21_u5757_u7684_u4EE3_u7801_u793A_u4F8B" class="headerlink" title="一个模块的代码示例"></a>一个模块的代码示例</h2><h3 id="loginstate-html_u4EE3_u7801"><a href="#loginstate-html_u4EE3_u7801" class="headerlink" title="loginstate.html代码"></a>loginstate.html代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"loginstate.css"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"loginstate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/space"</span>&gt;</span>左盐<span class="tag">&lt;/<span class="title">a</span>&gt;</span> | <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0);"</span>&gt;</span>退出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"member.jpg"</span> <span class="attribute">id</span>=<span class="value">"avatar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">	<span class="keyword">var</span> loginstate = <span class="built_in">require</span>(<span class="string">'loginstate/loginstate'</span>);</span><br><span class="line">	loginstate.init();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="loginstate-js_u4EE3_u7801"><a href="#loginstate-js_u4EE3_u7801" class="headerlink" title="loginstate.js代码"></a>loginstate.js代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $  = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"><span class="keyword">var</span> tools = <span class="built_in">require</span>(<span class="string">'pizzatools'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'pizzalayer'</span>);</span><br><span class="line"><span class="keyword">var</span> loginState = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 打印登录状态</span><br><span class="line">	 * @return &#123;[type]&#125; [description]</span><br><span class="line">	 */</span></span><br><span class="line">	_self.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">var</span> id = tools.getCookie(<span class="string">'id'</span>);</span><br><span class="line">		<span class="keyword">if</span>(id == <span class="string">'0'</span> ) &#123;<span class="comment">//未登录</span></span><br><span class="line">			s = <span class="string">'&lt;a href="/login?f='</span>+<span class="built_in">document</span>.location.href+<span class="string">'" class="btn btn-primary"&gt;登录&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href="/reg" class="btn btn-primary"&gt;注册&lt;/a&gt;'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			s = <span class="string">'&lt;a href="/space"&gt;'</span> + tools.getCookie(<span class="string">'nickname'</span>) + <span class="string">'&lt;/a&gt; | &lt;a href="javascript:void(0);" onclick="loginstate.loginout();"&gt;退出&lt;/a&gt;&lt;img src="'</span> + tools.siteData.url.avatar + tools.getCookie(<span class="string">'avatar'</span>) + <span class="string">'!v1" id="avatar" /&gt;'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$(<span class="string">'.loginstate'</span>).html(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 退出登录</span><br><span class="line">	 * @return &#123;[type]&#125; [description]</span><br><span class="line">	 */</span></span><br><span class="line">	_self.loginout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">			type:<span class="string">'GET'</span>,</span><br><span class="line">			url:<span class="string">'/index/loginout'</span>,</span><br><span class="line">			success: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">var</span> url = <span class="built_in">document</span>.location.href.split(<span class="string">'/'</span>);</span><br><span class="line">				<span class="keyword">if</span>(url[<span class="number">3</span>] == <span class="string">'space'</span>) &#123;</span><br><span class="line">					<span class="built_in">document</span>.location.href = <span class="string">'/'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">document</span>.location.reload();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loginState;</span><br></pre></td></tr></table></figure>
<h3 id="index-html_u4EE3_u7801"><a href="#index-html_u4EE3_u7801" class="headerlink" title="index.html代码"></a>index.html代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"import"</span> <span class="attribute">href</span>=<span class="value">"/widget/loginstate/loginstate.html?__inline"</span>&gt;</span><span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>主页<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>由此前端模块化已经全部完成</p>
<h2 id="u6240_u9700_u63D2_u4EF6"><a href="#u6240_u9700_u63D2_u4EF6" class="headerlink" title="所需插件"></a>所需插件</h2><ul>
<li>fis3-postpackager-loader</li>
<li>fis-parser-ejs</li>
<li>fis-parser-swigt</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g 以上插件即可</span><br></pre></td></tr></table></figure>
<h2 id="fis-conf-js"><a href="#fis-conf-js" class="headerlink" title="fis-conf.js"></a>fis-conf.js</h2><p>结合我的项目，本人的配置文件如下。下载本配置文件并且安装好fis后，可以直接使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于使用了bower，有很多非必须资源。通过set project.files对象指定需要编译的文件夹和引用的资源</span></span><br><span class="line"><span class="comment">// fis.set('project.files', ['page/**', 'map.json', 'modules/**', 'lib']);</span></span><br><span class="line">fis.set(<span class="string">'project.ignore'</span>, [<span class="string">'*.bat'</span>, <span class="string">'*.rar'</span>, <span class="string">'node_modules/**'</span>, <span class="string">'fis-conf.js'</span>, <span class="string">"package.json"</span>]);</span><br><span class="line"></span><br><span class="line">fis.set(<span class="string">'statics'</span>, <span class="string">'/www/static'</span>); <span class="comment">//static目录</span></span><br><span class="line">fis.set(<span class="string">'url'</span>, <span class="string">'/static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//FIS modjs模块化方案，您也可以选择amd/commonjs等</span></span><br><span class="line">fis.hook(<span class="string">'commonjs'</span>, &#123;</span><br><span class="line">    mod: <span class="string">'amd'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************目录规范*****************************/</span></span><br><span class="line">fis.match(<span class="string">"**/*"</span>, &#123;</span><br><span class="line">        release: <span class="string">'$&#123;statics&#125;/$&amp;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .match(<span class="string">"**/*.ejs"</span>, &#123;</span><br><span class="line">        parser: fis.plugin(<span class="string">'ejs'</span>),</span><br><span class="line">        isJsLike: <span class="literal">true</span>,</span><br><span class="line">        release: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//modules下面都是模块化资源</span></span><br><span class="line">    .match(<span class="regexp">/^\/modules\/([^\/]+)\/(.*)\.(js)$/i</span>, &#123;</span><br><span class="line">        isMod: <span class="literal">true</span>,</span><br><span class="line">        id: <span class="string">'$1'</span>, <span class="comment">//id支持简写，去掉modules和.js后缀中间的部分</span></span><br><span class="line">        release: <span class="string">'$&#123;statics&#125;/$&amp;'</span>,</span><br><span class="line">        url: <span class="string">'$&#123;url&#125;/$&amp;'</span>,</span><br><span class="line">        <span class="comment">//optimizer: fis.plugin('uglify-js')</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//page下面的页面发布时去掉page文件夹</span></span><br><span class="line">    .match(<span class="regexp">/^\/view\/(.*)$/i</span>, &#123;</span><br><span class="line">        parser: fis.plugin(<span class="string">'swigt'</span>),</span><br><span class="line">        useCache: <span class="literal">false</span>,</span><br><span class="line">        release: <span class="string">'/$&amp;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .match(<span class="regexp">/^\/(widget|site)\/(.*)\.(js)$/i</span>, &#123;</span><br><span class="line">      isMod:<span class="literal">true</span>,</span><br><span class="line">      id: <span class="string">'$2'</span>,</span><br><span class="line">       url: <span class="string">'$&#123;url&#125;/$&amp;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .match(<span class="regexp">/^\/widget\/kindeditor-4.1.10\/(.*)\.(js)$/i</span>, &#123;</span><br><span class="line">      isMod:<span class="literal">false</span>,</span><br><span class="line">       url: <span class="string">'$&#123;url&#125;/$&amp;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//less的mixin文件无需发布</span></span><br><span class="line">    .match(<span class="regexp">/^(.*)mixin\.less$/i</span>, &#123;</span><br><span class="line">        release: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//前端模板,当做类js文件处理，可以识别__inline, __uri等资源定位标识</span></span><br><span class="line">    .match(<span class="string">"**/*.tmpl"</span>, &#123;</span><br><span class="line">        isJsLike: <span class="literal">true</span>,</span><br><span class="line">        release: <span class="literal">false</span></span><br><span class="line">    &#125;).match(<span class="string">"**/*"</span>, &#123;</span><br><span class="line">        url: <span class="string">'/static$&amp;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//页面模板不用编译缓存</span></span><br><span class="line">    .match(<span class="regexp">/.*\.(html|jsp|tpl|vm|htm|asp|aspx|php)$/</span>, &#123;</span><br><span class="line">        useCache: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打包与css sprite基础配置</span></span><br><span class="line">fis.match(<span class="string">'::packager'</span>, &#123;</span><br><span class="line">    <span class="comment">// npm install [-g] fis3-postpackager-loader</span></span><br><span class="line">    postpackager: fis.plugin(<span class="string">'loader'</span>, &#123;</span><br><span class="line">        resourceType: <span class="string">'mod'</span>,</span><br><span class="line">        obtainScript: <span class="literal">true</span>,</span><br><span class="line">        allInOne: <span class="literal">true</span>,</span><br><span class="line">        useInlineMap: <span class="literal">true</span>, <span class="comment">// 资源映射表内嵌</span></span><br><span class="line">    &#125;),</span><br><span class="line">    packager: fis.plugin(<span class="string">'map'</span>, &#123;</span><br><span class="line">      useTrack: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">'pkg/base.js'</span>: [<span class="string">'/modules/jquery/*.js'</span>, <span class="string">'/modules/layer/*.js'</span>, <span class="string">'/modules/pizzalayer/*.js'</span>, <span class="string">'/modules/pizzatools/*.js'</span>],</span><br><span class="line">      <span class="string">'pkg/base-a.js'</span>: [<span class="string">'/widget/globle/*.js'</span>, <span class="string">'/modules/pizzaui/pizza.ui.js'</span>, <span class="string">'/site/common/common.js'</span>],</span><br><span class="line">      <span class="string">'pkg/base.css'</span>: [<span class="string">'/css/pizza.css'</span>, <span class="string">'/css/iconfont.css'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    spriter: fis.plugin(<span class="string">'csssprites'</span>, &#123;</span><br><span class="line">        layout: <span class="string">'matrix'</span>,</span><br><span class="line">        margin: <span class="string">'15'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u7AEF_u6784_u5EFA_u5DE5_u5177"><a href="#u524D_u7AEF_u6784_u5EFA_u5DE5_u5177" class="headerlink" title="前端构建工具"></a>前端构建工具</h2]]>
    </summary>
    
      <category term="fis" scheme="http://zuoyanart.github.io/tags/fis/"/>
    
      <category term="前端" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端工程化" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="前端模块化" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos安装源配置]]></title>
    <link href="http://zuoyanart.github.io/2016/01/07/centos%E5%AE%89%E8%A3%85%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
    <id>http://zuoyanart.github.io/2016/01/07/centos安装源配置/</id>
    <published>2016-01-07T08:15:35.000Z</published>
    <updated>2016-01-07T08:18:05.994Z</updated>
    <content type="html"><![CDATA[<h2 id="u5B89_u88C5EPEL_u7684yum_u6E90"><a href="#u5B89_u88C5EPEL_u7684yum_u6E90" class="headerlink" title="安装EPEL的yum源"></a>安装EPEL的yum源</h2><blockquote>
<p>EPEL 是 Extra Packages for Enterprise Linux 的缩写（EPEL），是用于 Fedora-based Red Hat Enterprise Linux (RHEL) 的一个高质量软件源EPEL(<a href="http://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">http://fedoraproject.org/wiki/EPEL</a>) 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。</p>
</blockquote>
<h2 id="u7B2C_u4E00_u79CD_u79CD_u65B9_u6CD5"><a href="#u7B2C_u4E00_u79CD_u79CD_u65B9_u6CD5" class="headerlink" title="第一种种方法"></a>第一种种方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure>
<h2 id="u7B2C_u4E8C_u79CD_u65B9_u6CD5"><a href="#u7B2C_u4E8C_u79CD_u65B9_u6CD5" class="headerlink" title="第二种方法"></a>第二种方法</h2><h3 id="CentOS6"><a href="#CentOS6" class="headerlink" title="CentOS6"></a>CentOS6</h3><h3 id="u8BF7_u7F16_u8F91/etc/yum-repos-d/epel-repo_u8F93_u5165_u4EE5_u4E0B_u5185_u5BB9"><a href="#u8BF7_u7F16_u8F91/etc/yum-repos-d/epel-repo_u8F93_u5165_u4EE5_u4E0B_u5185_u5BB9" class="headerlink" title="请编辑/etc/yum.repos.d/epel.repo输入以下内容"></a>请编辑/etc/yum.repos.d/epel.repo输入以下内容</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</span><br><span class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line"> </span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Debug</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch/debug</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line">gpgcheck=1</span><br><span class="line"> </span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Source</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/6/SRPMS</span><br><span class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<p>然后执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p>
<h3 id="centos7_u7684epel_u6E90"><a href="#centos7_u7684epel_u6E90" class="headerlink" title="centos7的epel源"></a>centos7的epel源</h3><h3 id="u7F16_u8F91/etc/yum-repos-d/epel-repo"><a href="#u7F16_u8F91/etc/yum-repos-d/epel-repo" class="headerlink" title="编辑/etc/yum.repos.d/epel.repo"></a>编辑/etc/yum.repos.d/epel.repo</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span><br><span class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Debug</span><br><span class="line">baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch/debug</span><br><span class="line">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br><span class="line">[epel-source]</span><br><span class="line">name=Extra Packages for Enterprise Linux 7 - $basearch - Source</span><br><span class="line">#baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS</span><br><span class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearch</span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<p>然后执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5B89_u88C5EPEL_u7684yum_u6E90"><a href="#u5B89_u88C5EPEL_u7684yum_u6E90" class="headerlink" title="安装EPEL的yum源"></a>安装EPEL的yum源</h2]]>
    </summary>
    
      <category term="centos" scheme="http://zuoyanart.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux让进程后台运行的方法]]></title>
    <link href="http://zuoyanart.github.io/2016/01/07/linux%E8%AE%A9%E8%BF%9B%E7%A8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://zuoyanart.github.io/2016/01/07/linux让进程后台运行的方法/</id>
    <published>2016-01-07T08:03:33.000Z</published>
    <updated>2016-04-28T04:39:32.382Z</updated>
    <content type="html"><![CDATA[<p>我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题。</p>
<h2 id="nohup/setsid/_26amp_3B"><a href="#nohup/setsid/_26amp_3B" class="headerlink" title="nohup/setsid/&amp;"></a>nohup/setsid/&amp;</h2><h3 id="u573A_u666F_uFF1A"><a href="#u573A_u666F_uFF1A" class="headerlink" title="场景："></a>场景：</h3><p>如果只是临时有一个命令需要长时间运行，什么方法能最简便的保证它在后台稳定运行呢？<br>hangup 名称的来由<br>在 Unix 的早期版本中，每个终端都会通过 modem 和系统通讯。当用户 logout 时，modem 就会挂断（hang up）电话。 同理，当 modem 断开连接时，就会给终端发送 hangup 信号来通知其关闭所有子进程。</p>
<h3 id="u89E3_u51B3_u65B9_u6CD5_uFF1A"><a href="#u89E3_u51B3_u65B9_u6CD5_uFF1A" class="headerlink" title="解决方法："></a>解决方法：</h3><p>我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程。</p>
<h3 id="1-_nohup"><a href="#1-_nohup" class="headerlink" title="1. nohup"></a>1. nohup</h3><p>nohup 无疑是我们首先想到的办法。顾名思义，nohup 的用途就是让提交的命令忽略 hangup 信号。让我们先来看一下 nohup 的帮助信息：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">NOHUP(<span class="number">1</span>)                        User Commands                        NOHUP(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       nohup - run a command immune to hangups, <span class="keyword">with</span> output to a non-tty</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       nohup COMMAND [ARG]...</span><br><span class="line">       nohup OPTION</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Run COMMAND, ignoring hangup signals.</span><br><span class="line"></span><br><span class="line">       --help display <span class="keyword">this</span> help and exit</span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              output version information and exit</span><br></pre></td></tr></table></figure>
<p>可见，nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename 2&gt;&amp;1”来更改缺省的重定向文件名。</p>
<h3 id="nohup__u793A_u4F8B"><a href="#nohup__u793A_u4F8B" class="headerlink" title="nohup 示例"></a>nohup 示例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# nohup ping www.ibm.com &amp;</span><br><span class="line">[1] 3059</span><br><span class="line">nohup: appending output to `nohup.out'</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep 3059</span><br><span class="line">root      3059   984  0 21:06 pts/3    00:00:00 ping www.ibm.com</span><br><span class="line">root      3067   984  0 21:06 pts/3    00:00:00 grep 3059</span><br><span class="line">[root@pvcent107 ~]#</span><br></pre></td></tr></table></figure>
<h3 id="2-setsid"><a href="#2-setsid" class="headerlink" title="2.setsid"></a>2.setsid</h3><p>nohup 无疑能通过忽略 HUP 信号来使我们的进程避免中途被中断，但如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。让我们先来看一下 setsid 的帮助信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SETSID(<span class="number">8</span>)                 Linux Programmer’s Manual                 SETSID(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       setsid - run a program <span class="keyword">in</span> a <span class="keyword">new</span> session</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       setsid program [ arg ... ]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       setsid runs a program <span class="keyword">in</span> a <span class="keyword">new</span> session.</span><br></pre></td></tr></table></figure></p>
<p>可见 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可。</p>
<h3 id="setsid__u793A_u4F8B"><a href="#setsid__u793A_u4F8B" class="headerlink" title="setsid 示例"></a>setsid 示例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# setsid ping www.ibm.com</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep www.ibm.com</span><br><span class="line">root     31094     1  0 07:28 ?        00:00:00 ping www.ibm.com</span><br><span class="line">root     31102 29217  0 07:29 pts/4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]#</span><br></pre></td></tr></table></figure>
<p>值得注意的是，上例中我们的进程 ID(PID)为31094，而它的父 ID（PPID）为1（即为 init 进程 ID），并不是当前终端的进程 ID。请将此例与nohup 例中的父 ID 做比较。</p>
<h3 id="3-_26amp_3B"><a href="#3-_26amp_3B" class="headerlink" title="3.&amp;"></a>3.&amp;</h3><p>这里还有一个关于 subshell 的小技巧。我们知道，将一个或多个命名包含在“()”中就能让这些命令在子 shell 中运行中，从而扩展出很多有趣的功能，我们现在要讨论的就是其中之一。<br>当我们将”&amp;”也放入“()”内之后，我们就会发现所提交的作业并不在作业列表中，也就是说，是无法通过jobs来查看的。让我们来看看为什么这样就能躲过 HUP 信号的影响吧。</p>
<h3 id="subshell__u793A_u4F8B"><a href="#subshell__u793A_u4F8B" class="headerlink" title="subshell 示例"></a>subshell 示例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# (ping www.ibm.com &amp;)</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep www.ibm.com</span><br><span class="line">root     16270     1  0 14:13 pts/4    00:00:00 ping www.ibm.com</span><br><span class="line">root     16278 15362  0 14:13 pts/4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]#</span><br></pre></td></tr></table></figure>
<p>从上例中可以看出，新提交的进程的父 ID（PPID）为1（init 进程的 PID），并不是当前终端的进程 ID。因此并不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了。</p>
<h2 id="disown"><a href="#disown" class="headerlink" title="disown"></a>disown</h2><h3 id="u573A_u666F_uFF1A-1"><a href="#u573A_u666F_uFF1A-1" class="headerlink" title="场景："></a>场景：</h3><p>我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？</p>
<h3 id="u89E3_u51B3_u65B9_u6CD5_uFF1A-1"><a href="#u89E3_u51B3_u65B9_u6CD5_uFF1A-1" class="headerlink" title="解决方法："></a>解决方法：</h3><p>这时想加 nohup 或者 setsid 已经为时已晚，只能通过作业调度和 disown 来解决这个问题了。让我们来看一下 disown 的帮助信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">disown [-ar] [-h] [jobspec ...]</span><br><span class="line">	Without options, each jobspec is  removed  from  the  table  <span class="keyword">of</span></span><br><span class="line">	active  jobs.   If  the -h option is given, each jobspec is not</span><br><span class="line">	removed from the table, but is marked so  that  SIGHUP  is  not</span><br><span class="line">	sent  to the job <span class="keyword">if</span> the shell receives a SIGHUP.  If no jobspec</span><br><span class="line">	is present, and neither the -a nor the -r option  is  supplied,</span><br><span class="line">	the  current  job  is  used.  If no jobspec is supplied, the -a</span><br><span class="line">	option means to remove or mark all jobs; the -r option  without</span><br><span class="line">	a  jobspec  argument  restricts operation to running jobs.  The</span><br><span class="line">	<span class="keyword">return</span> value is <span class="number">0</span> unless a jobspec does  not  specify  a  valid</span><br><span class="line">	job.</span><br></pre></td></tr></table></figure></p>
<p>可以看出，我们可以用如下方式来达成我们的目的。</p>
<blockquote>
<p>用disown -h jobspec来使某个作业忽略HUP信号。<br>用disown -ah 来使所有的作业都忽略HUP信号。<br>用disown -rh 来使正在运行的作业忽略HUP信号。<br>需要注意的是，当使用过 disown 之后，会将把目标作业从作业列表中移除，我们将不能再使用jobs来查看它，但是依然能够用ps -ef查找到它。</p>
</blockquote>
<p>但是还有一个问题，这种方法的操作对象是作业，如果我们在运行命令时在结尾加了”&amp;”来使它成为一个作业并在后台运行，那么就万事大吉了，我们可以通过jobs命令来得到所有作业的列表。但是如果并没有把当前命令作为作业来运行，如何才能得到它的作业号呢？答案就是用 CTRL-z（按住Ctrl键的同时按住z键）了！</p>
<p>CTRL-z 的用途就是将当前进程挂起（Suspend），然后我们就可以用jobs命令来查询它的作业号，再用bg jobspec来将它放入后台并继续运行。需要注意的是，如果挂起会影响当前进程的运行结果，请慎用此方法。</p>
<h3 id="disown__u793A_u4F8B1_uFF08_u5982_u679C_u63D0_u4EA4_u547D_u4EE4_u65F6_u5DF2_u7ECF_u7528_u201C_26amp_3B_u201D_u5C06_u547D_u4EE4_u653E_u5165_u540E_u53F0_u8FD0_u884C_uFF0C_u5219_u53EF_u4EE5_u76F4_u63A5_u4F7F_u7528_u201Cdisown_u201D_uFF09"><a href="#disown__u793A_u4F8B1_uFF08_u5982_u679C_u63D0_u4EA4_u547D_u4EE4_u65F6_u5DF2_u7ECF_u7528_u201C_26amp_3B_u201D_u5C06_u547D_u4EE4_u653E_u5165_u540E_u53F0_u8FD0_u884C_uFF0C_u5219_u53EF_u4EE5_u76F4_u63A5_u4F7F_u7528_u201Cdisown_u201D_uFF09" class="headerlink" title="disown 示例1（如果提交命令时已经用“&amp;”将命令放入后台运行，则可以直接使用“disown”）"></a>disown 示例1（如果提交命令时已经用“&amp;”将命令放入后台运行，则可以直接使用“disown”）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 build]# cp -r testLargeFile largeFile &amp;</span><br><span class="line">[1] 4825</span><br><span class="line">[root@pvcent107 build]# jobs</span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile &amp;</span><br><span class="line">[root@pvcent107 build]# disown -h %1</span><br><span class="line">[root@pvcent107 build]# ps -ef |grep largeFile</span><br><span class="line">root      4825   968  1 09:46 pts/4    00:00:00 cp -i -r testLargeFile largeFile</span><br><span class="line">root      4853   968  0 09:46 pts/4    00:00:00 grep largeFile</span><br><span class="line">[root@pvcent107 build]# logout</span><br></pre></td></tr></table></figure>
<h3 id="disown__u793A_u4F8B2_uFF08_u5982_u679C_u63D0_u4EA4_u547D_u4EE4_u65F6_u672A_u4F7F_u7528_u201C_26amp_3B_u201D_u5C06_u547D_u4EE4_u653E_u5165_u540E_u53F0_u8FD0_u884C_uFF0C_u53EF_u4F7F_u7528_CTRL-z__u548C_u201Cbg_u201D_u5C06_u5176_u653E_u5165_u540E_u53F0_uFF0C_u518D_u4F7F_u7528_u201Cdisown_u201D_uFF09"><a href="#disown__u793A_u4F8B2_uFF08_u5982_u679C_u63D0_u4EA4_u547D_u4EE4_u65F6_u672A_u4F7F_u7528_u201C_26amp_3B_u201D_u5C06_u547D_u4EE4_u653E_u5165_u540E_u53F0_u8FD0_u884C_uFF0C_u53EF_u4F7F_u7528_CTRL-z__u548C_u201Cbg_u201D_u5C06_u5176_u653E_u5165_u540E_u53F0_uFF0C_u518D_u4F7F_u7528_u201Cdisown_u201D_uFF09" class="headerlink" title="disown 示例2（如果提交命令时未使用“&amp;”将命令放入后台运行，可使用 CTRL-z 和“bg”将其放入后台，再使用“disown”）"></a>disown 示例2（如果提交命令时未使用“&amp;”将命令放入后台运行，可使用 CTRL-z 和“bg”将其放入后台，再使用“disown”）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 build]# cp -r testLargeFile largeFile2</span><br><span class="line"></span><br><span class="line">[1]+  Stopped                 cp -i -r testLargeFile largeFile2</span><br><span class="line">[root@pvcent107 build]# bg %1</span><br><span class="line">[1]+ cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]# jobs</span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]# disown -h %1</span><br><span class="line">[root@pvcent107 build]# ps -ef |grep largeFile2</span><br><span class="line">root      5790  5577  1 10:04 pts/3    00:00:00 cp -i -r testLargeFile largeFile2</span><br><span class="line">root      5824  5577  0 10:05 pts/3    00:00:00 grep largeFile2</span><br><span class="line">[root@pvcent107 build]#</span><br></pre></td></tr></table></figure>
<h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><h3 id="u573A_u666F_uFF1A-2"><a href="#u573A_u666F_uFF1A-2" class="headerlink" title="场景："></a>场景：</h3><p>我们已经知道了如何让进程免受 HUP 信号的影响，但是如果有大量这种命令需要在稳定的后台里运行，如何避免对每条命令都做这样的操作呢？</p>
<h3 id="u89E3_u51B3_u65B9_u6CD5_uFF1A-2"><a href="#u89E3_u51B3_u65B9_u6CD5_uFF1A-2" class="headerlink" title="解决方法："></a>解决方法：</h3><p>此时最方便的方法就是 screen 了。简单的说，screen 提供了 ANSI/VT100 的终端模拟器，使它能够在一个真实终端下运行多个全屏的伪终端。screen 的参数很多，具有很强大的功能，我们在此仅介绍其常用功能以及简要分析一下为什么使用 screen 能够避免 HUP 信号的影响。我们先看一下 screen 的帮助信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SCREEN(<span class="number">1</span>)                                                           SCREEN(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       screen - screen manager <span class="keyword">with</span> VT100/ANSI terminal emulation</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       screen [ -options ] [ cmd [ args ] ]</span><br><span class="line">       screen -r [[pid.]tty[.host]]</span><br><span class="line">       screen -r sessionowner/[[pid.]tty[.host]]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Screen  is  a  full-screen  <span class="built_in">window</span> manager that multiplexes a physical</span><br><span class="line">       terminal between several  processes  (typically  interactive  shells).</span><br><span class="line">       Each  virtual  terminal provides the functions <span class="keyword">of</span> a DEC VT100 terminal</span><br><span class="line">       and, <span class="keyword">in</span> addition, several control functions from the  ISO  <span class="number">6429</span>  (ECMA</span><br><span class="line">       <span class="number">48</span>,  ANSI  X3<span class="number">.64</span>)  and ISO <span class="number">2022</span> standards (e.g. insert/<span class="keyword">delete</span> line and</span><br><span class="line">       support <span class="keyword">for</span> multiple character sets).  There is a  scrollback  history</span><br><span class="line">       buffer  <span class="keyword">for</span>  each virtual terminal and a copy-and-paste mechanism that</span><br><span class="line">       allows moving text regions between windows.</span><br></pre></td></tr></table></figure></p>
<p>使用 screen 很方便，有以下几个常用选项：</p>
<blockquote>
<p>用screen -dmS session name来建立一个处于断开模式下的会话（并指定其会话名）。<br>用screen -list 来列出所有会话。<br>用screen -r session name来重新连接指定会话。<br>用快捷键CTRL-a d 来暂时断开当前会话。</p>
</blockquote>
<h3 id="screen__u793A_u4F8B"><a href="#screen__u793A_u4F8B" class="headerlink" title="screen 示例"></a>screen 示例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# screen -dmS Urumchi</span><br><span class="line">[root@pvcent107 ~]# screen -list</span><br><span class="line">There is a screen on:</span><br><span class="line">        12842.Urumchi   (Detached)</span><br><span class="line">1 Socket in /tmp/screens/S-root.</span><br><span class="line"></span><br><span class="line">[root@pvcent107 ~]# screen -r Urumchi</span><br></pre></td></tr></table></figure>
<p>当我们用“-r”连接到 screen 会话后，我们就可以在这个伪终端里面为所欲为，再也不用担心 HUP 信号会对我们的进程造成影响，也不用给每个命令前都加上“nohup”或者“setsid”了。这是为什么呢？让我来看一下下面两个例子吧。</p>
<h3 id="1-__u672A_u4F7F_u7528_screen__u65F6_u65B0_u8FDB_u7A0B_u7684_u8FDB_u7A0B_u6811"><a href="#1-__u672A_u4F7F_u7528_screen__u65F6_u65B0_u8FDB_u7A0B_u7684_u8FDB_u7A0B_u6811" class="headerlink" title="1. 未使用 screen 时新进程的进程树"></a>1. 未使用 screen 时新进程的进程树</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# ping www.google.com &amp;</span><br><span class="line">[1] 9499</span><br><span class="line">[root@pvcent107 ~]# pstree -H 9499</span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─2*[sendmail]	</span><br><span class="line">     ├─sshd─┬─sshd───bash───pstree</span><br><span class="line">     │       └─sshd───bash───ping</span><br></pre></td></tr></table></figure>
<p>我们可以看出，未使用 screen 时我们所处的 bash 是 sshd 的子进程，当 ssh 断开连接时，HUP 信号自然会影响到它下面的所有子进程（包括我们新建立的 ping 进程）。</p>
<h3 id="2-__u4F7F_u7528_u4E86_screen__u540E_u65B0_u8FDB_u7A0B_u7684_u8FDB_u7A0B_u6811"><a href="#2-__u4F7F_u7528_u4E86_screen__u540E_u65B0_u8FDB_u7A0B_u7684_u8FDB_u7A0B_u6811" class="headerlink" title="2. 使用了 screen 后新进程的进程树"></a>2. 使用了 screen 后新进程的进程树</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]# screen -r Urumchi</span><br><span class="line">[root@pvcent107 ~]# ping www.ibm.com &amp;</span><br><span class="line">[1] 9488</span><br><span class="line">[root@pvcent107 ~]# pstree -H 9488</span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─screen───bash───ping</span><br><span class="line">     ├─2*[sendmail]</span><br></pre></td></tr></table></figure>
<p>而使用了 screen 后就不同了，此时 bash 是 screen 的子进程，而 screen 是 init（PID为1）的子进程。那么当 ssh 断开连接时，HUP 信号自然不会影响到 screen 下面的子进程了。<br>回页首</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>现在几种方法已经介绍完毕，我们可以根据不同的场景来选择不同的方案。nohup/setsid 无疑是临时需要时最方便的方法，disown 能帮助我们来事后补救当前已经在运行了的作业，而 screen 则是在大批量操作时不二的选择了。</p>
<h2 id="u7ED3_u675F_u8FDB_u7A0B"><a href="#u7ED3_u675F_u8FDB_u7A0B" class="headerlink" title="结束进程"></a>结束进程</h2><p>无疑最好的方式是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep cmd</span><br><span class="line"></span><br><span class="line">kill pid</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理]]>
    </summary>
    
      <category term="centos" scheme="http://zuoyanart.github.io/tags/centos/"/>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
      <category term="linux" scheme="http://zuoyanart.github.io/tags/linux/"/>
    
      <category term="文摘" scheme="http://zuoyanart.github.io/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang的centos安装]]></title>
    <link href="http://zuoyanart.github.io/2016/01/07/golang%E7%9A%84centos%E5%AE%89%E8%A3%85/"/>
    <id>http://zuoyanart.github.io/2016/01/07/golang的centos安装/</id>
    <published>2016-01-07T07:59:15.000Z</published>
    <updated>2016-04-25T09:14:07.823Z</updated>
    <content type="html"><![CDATA[<h2 id="Linux_u4E0B_u5B89_u88C5_28_u57FA_u4E8Ecentos_29"><a href="#Linux_u4E0B_u5B89_u88C5_28_u57FA_u4E8Ecentos_29" class="headerlink" title="Linux下安装(基于centos)"></a>Linux下安装(基于centos)</h2><h2 id="u4E0B_u8F7Dgolang"><a href="#u4E0B_u8F7Dgolang" class="headerlink" title="下载golang"></a>下载golang</h2><p>根据自己的系统位数（32位/64位）下载适合自己的版本的golang安装包</p>
<p>下载地址：<a href="https://golang.org/dl/" target="_blank" rel="external">https://golang.org/dl/</a></p>
<h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf go1<span class="number">.5</span><span class="number">.1</span>.linux-amd64.tar.gz -C /data/soft/golang</span><br><span class="line"><span class="comment">//  /data/soft/golang 为安装位置</span></span><br></pre></td></tr></table></figure>
<h2 id="u8BBE_u7F6EGOPATH"><a href="#u8BBE_u7F6EGOPATH" class="headerlink" title="设置GOPATH"></a>设置GOPATH</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在最后添加如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> GOROOT=<span class="regexp">/data/</span>soft/golang/go   <span class="comment">//安装位置</span></span><br><span class="line"><span class="keyword">export</span> GOPATH=<span class="regexp">/data/</span>host/go <span class="comment">//自定义代码位置</span></span><br><span class="line"><span class="keyword">export</span> GOBIN=$GOROOT/bin</span><br><span class="line"><span class="keyword">export</span> GOPKG=$GOPATH/pkg/linux_amd64</span><br><span class="line"><span class="keyword">export</span> GOARCH=amd64</span><br><span class="line"><span class="keyword">export</span> GOOS=linux</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GOBIN:$GOPKG:$GOPATH/bin</span><br></pre></td></tr></table></figure></p>
<p>然后编译生效<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<h2 id="u9A8C_u8BC1_u5B89_u88C5"><a href="#u9A8C_u8BC1_u5B89_u88C5" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>
<p>如果出现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version go1<span class="number">.5</span><span class="number">.1</span> linux/amd64</span><br></pre></td></tr></table></figure></p>
<p>则说明安装成功</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Linux_u4E0B_u5B89_u88C5_28_u57FA_u4E8Ecentos_29"><a href="#Linux_u4E0B_u5B89_u88C5_28_u57FA_u4E8Ecentos_29" class="headerlink" title]]>
    </summary>
    
      <category term="centos" scheme="http://zuoyanart.github.io/tags/centos/"/>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx配置网站适配PC和手机]]></title>
    <link href="http://zuoyanart.github.io/2016/01/07/ngxinqufenpcmobile/"/>
    <id>http://zuoyanart.github.io/2016/01/07/ngxinqufenpcmobile/</id>
    <published>2016-01-07T07:28:34.000Z</published>
    <updated>2016-01-07T07:57:03.511Z</updated>
    <content type="html"><![CDATA[<p>现在的网页开发一般都会适配与移动端，也即是响应式网页开发，这其中也有很多的ui框架可以帮助开发者完成自动适配（比如bootstrap）。但是我个人一般不采用这种方式，因为我觉的这种框架在移动端表现的过重了，而且响应式设计会影响到PC端web的设计思路，对比起来我还是选择开发两套系统的方式来走移动端适配。</p>
<p>自动判断是加载移动端页面还是pc端页面的通用做法就是通过User-Agent来做判断。</p>
<h2 id="u5224_u65AD_u5BA2_u6237_u7AEF_u7684_u8BBE_u5907_u7C7B_u578B"><a href="#u5224_u65AD_u5BA2_u6237_u7AEF_u7684_u8BBE_u5907_u7C7B_u578B" class="headerlink" title="判断客户端的设备类型"></a>判断客户端的设备类型</h2><p>首先国外有一套开源的通过User-Agent区分PC和手机的解决方案并且长期维护，可以直接使用：<a href="http://detectmobilebrowsers.com/" target="_blank" rel="external">http://detectmobilebrowsers.com/</a></p>
<p>由于本文使用Nginx，只要在网站上下载Nginx配置即可。</p>
<p>下载的文件大致是这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set $mobile_rewrite do_not_perform;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino") &#123;</span><br><span class="line">  set $mobile_rewrite perform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* "^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)") &#123;</span><br><span class="line">  set $mobile_rewrite perform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 条件判断，自行修改为自己的</span><br><span class="line">if ($mobile_rewrite = perform) &#123;</span><br><span class="line">  rewrite ^ http://detectmobilebrowser.com/mobile redirect;</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx_u914D_u7F6E_u6587_u4EF6"><a href="#nginx_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; #网站访问</span><br><span class="line">     proxy_pass http://node_pc_app; # pc端</span><br><span class="line">     if ($mobile_rewrite = perform) &#123;</span><br><span class="line">         proxy_pass http://node_mobile_app;  #手机版</span><br><span class="line">      &#125;</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">location ~.*\.(gif|jpg|jpeg|png|bmp|swf|js|css|ejs|htm|html|txt) &#123; #静态文件</span><br><span class="line">    root   /pc/staic/; # pc端</span><br><span class="line">    if ($mobile_rewrite = perform) &#123;#手机版</span><br><span class="line">       root   /mobile/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    expires max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="user-agent_u7684_u8865_u5145_u65B9_u6848"><a href="#user-agent_u7684_u8865_u5145_u65B9_u6848" class="headerlink" title="user-agent的补充方案"></a>user-agent的补充方案</h2><p>因为user-agent的覆盖率是有限的，并不能保证所有的访问都可以通过user-agent准确判断，这时候我们可以添加一个cookie来加强判断，通常的做法是页面底部放一个手机版和pc版的切换跳转连接，并且点击的时候添加cookie，这样服务器端再判断是否存在cookie即可</p>
<p>nginx配置如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($http_cookie ~ <span class="string">'gotopc=true'</span>) &#123;  </span><br><span class="line">    set $mobile_rewrite do_not_perform;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>使用 <a href="http://detectmobilebrowsers.com/" target="_blank" rel="external">http://detectmobilebrowsers.com/</a> 提供的user-agent判断是不包含pad的，因为pad的分辨率其实是可以达到pc端访问的分辨率的，所以没有添加判断，如果您也需要适配pad端，则添加pad的user-agent即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在的网页开发一般都会适配与移动端，也即是响应式网页开发，这其中也有很多的ui框架可以帮助开发者完成自动适配（比如bootstrap）。但是我个人一般不采用这种方式，因为我觉的这种框架在移动端表现的过重了，而且响应式设计会影响到PC端web的设计思路，对比起来我还是选择开发]]>
    </summary>
    
      <category term="mobile" scheme="http://zuoyanart.github.io/tags/mobile/"/>
    
      <category term="nginx" scheme="http://zuoyanart.github.io/tags/nginx/"/>
    
      <category term="移动端" scheme="http://zuoyanart.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网页中font-family的属性解析]]></title>
    <link href="http://zuoyanart.github.io/2016/01/01/font-family%E8%A7%A3%E6%9E%90/"/>
    <id>http://zuoyanart.github.io/2016/01/01/font-family解析/</id>
    <published>2016-01-01T14:38:43.000Z</published>
    <updated>2016-01-06T04:29:58.767Z</updated>
    <content type="html"><![CDATA[<h2 id="web_u4E2D_u6587_u5B57_u4F53_u7684_u9009_u62E9"><a href="#web_u4E2D_u6587_u5B57_u4F53_u7684_u9009_u62E9" class="headerlink" title="web中文字体的选择"></a>web中文字体的选择</h2><p>web应用程序因其跨平台性被广泛应用，但是也为web应用程序运行带来了复杂的运行环境，比如各个系统字体的区别以及中英文字体显示的区别。</p>
<h4 id="u5B57_u4F53_u5206_u7C7B"><a href="#u5B57_u4F53_u5206_u7C7B" class="headerlink" title="字体分类"></a>字体分类</h4><p>网页常用字体通常分为5类：serif(衬线)、sans-serif(无衬线)、monospace(等宽)、fantasy(梦幻)、cuisive(草体)，这些通用的名称允许用户代理从相应集合中选择一款字体。</p>
<ul>
<li>serif 字体在字符笔画末端有叫做衬线的小细节，这些细节在大写字母中特别明显。</li>
<li>sans-serif 字体在字符笔画末端没有任何细节，与serif字体相比，他们的外形更简单。</li>
<li>monospace 字体，每个字母的宽度相等，通常用于计算机相关书籍中排版代码块。</li>
<li>fantasy 和 cuisive 字体在浏览器中不常用，在各个浏览器中有明显的差异。</li>
</ul>
<h4 id="u7F51_u9875_u5E38_u7528_u5B57_u4F53"><a href="#u7F51_u9875_u5E38_u7528_u5B57_u4F53" class="headerlink" title="网页常用字体"></a>网页常用字体</h4><h5 id="Sans-serif_3A"><a href="#Sans-serif_3A" class="headerlink" title="Sans-serif:"></a>Sans-serif:</h5><ul>
<li><p>Helvetica: 被评为设计师最爱的字体，Realist风格，简洁现代的线条，非常受到追捧。在Mac下面被认为是最佳的网页字体，在Windows下由于Hinting的原因显示很糟糕。</p>
</li>
<li><p>Arial: Helvetica的「克隆」，和Helvetica非常像，细节上比如R和G有小小差别。如果字号太小，文字太多，看起来会有些累眼。Win和Mac显示都正常</p>
</li>
<li><p>Lucida Family: Lucida Grande是Mac OS UI的标准字体，属于humanist风格，稍微活泼一点。Mac下的显示要比Win下好。</p>
</li>
<li><p>Verdana: 专门为了屏显而设计的字体，humanist风格，在小字号下仍可以清楚显示，但是字体细节缺失严重，最好别做标题。</p>
</li>
<li><p>Tahoma: 也是humanist风格，字体和Verdana有点像，但是略窄一些，counter略小，曾经是Windows的标准字体，Mac 10.5之后默认也有安装。</p>
</li>
<li><p>Trebuchet MS: 为微软设计的一个humanist风格字体，个人觉得个性太过突出，用得不好会不搭。</p>
</li>
</ul>
<h5 id="Serif_uFF1A"><a href="#Serif_uFF1A" class="headerlink" title="Serif："></a>Serif：</h5><ul>
<li><p>Georgia: 基本上适合正文屏显的衬线字体，非Georgia莫属了。笔画粗重，衬线明线，轮廓较大，小字体显示也很清晰，同时细节还算OK。</p>
</li>
<li><p>Times: Times是为了报纸而设计的，特点是可以在有限的空间塞进去更多的文字，笔画较弱，小字号正文屏显看起来累眼。曾经Engadget改版的时候用了Times作为正文，被骂得很惨之后换成了Georgia。</p>
</li>
</ul>
<h5 id="u4E2D_u6587_uFF1A"><a href="#u4E2D_u6587_uFF1A" class="headerlink" title="中文："></a>中文：</h5><ul>
<li><p>宋体：Win最常见的字体，小字体点阵，大字体TrueType，但是大字体并不好看，所以最好别做标题。</p>
</li>
<li><p>微软雅黑：Vista之后新引入的字体，打开Cleartype之后显示效果不错，不开Cleartype发虚。</p>
</li>
<li><p>华文细黑：Mac下的默认中文。</p>
</li>
</ul>
<h2 id="font-family_u5199_u6CD5"><a href="#font-family_u5199_u6CD5" class="headerlink" title="font-family写法"></a>font-family写法</h2><ul>
<li><p>由于某些系统可能不存在中文字体的中文名，所以写中文字体别忘了添加英文名</p>
</li>
<li><p>因为英文字体的渲染通常比用中文字体渲染的效果好，所以英文字体声明在中文字体前。</p>
</li>
<li><p>尽量在各个系统中都显示的最好</p>
</li>
</ul>
<p>由此可得出font-family的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Arial, STXihei, <span class="string">"华文细黑"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"微软雅黑"</span>,SimSun, <span class="string">"宋体"</span> ;</span><br></pre></td></tr></table></figure>
<p>这样写基本可以保证主流系统在显示网页字体的时候效果最好，当然要注意的是：设计师在设计网页的时候也需要照顾不同的平台的字体属性</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="web_u4E2D_u6587_u5B57_u4F53_u7684_u9009_u62E9"><a href="#web_u4E2D_u6587_u5B57_u4F53_u7684_u9009_u62E9" class="headerlink" title="we]]>
    </summary>
    
      <category term="css" scheme="http://zuoyanart.github.io/tags/css/"/>
    
      <category term="前端" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx配置以及基本命令使用]]></title>
    <link href="http://zuoyanart.github.io/2016/01/01/nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://zuoyanart.github.io/2016/01/01/nginx配置/</id>
    <published>2016-01-01T05:02:47.000Z</published>
    <updated>2016-01-06T04:29:54.283Z</updated>
    <content type="html"><![CDATA[<h2 id="nginx_u914D_u7F6E"><a href="#nginx_u914D_u7F6E" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  root; #定义Nginx运行的用户和用户组</span><br><span class="line">worker_processes 1; #nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  1024;#单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class="line">    client_header_buffer_size 5m; #上传文件大小限制</span><br><span class="line">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class="line">    client_max_body_size 8m; #设定请求缓</span><br><span class="line"></span><br><span class="line">    tcp_nopush on; #防止网络阻塞</span><br><span class="line">    tcp_nodelay on; #防止网络阻塞</span><br><span class="line">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">   </span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2; #压缩等级</span><br><span class="line">    gzip_types  text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    upstream node_app &#123;</span><br><span class="line">      server 127.0.0.1:3001;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream node_zy_app &#123;</span><br><span class="line">       server 127.0.0.1:3012;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      server_name www.domain.com;</span><br><span class="line">      index index.html index.htm;</span><br><span class="line">      root /data/host/manage/server/;#路径</span><br><span class="line">      </span><br><span class="line">      access_log /data/host/manage/server/logs/host.access.log;#日志路径</span><br><span class="line">      error_log /data/host/manage/server/logs/host.error.log;#日志路径</span><br><span class="line">      location / &#123;</span><br><span class="line">            proxy_pass http://node_app;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;#设定ip</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      location ~.*\.(gif|jpg|jpeg|png|bmp|swf|js|css|ejs|htm|html|txt) &#123;#静态文件处理</span><br><span class="line">            root   /data/host/manage/server/public/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            expires max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">    	listen 80;</span><br><span class="line">    	server_name domain1.com;</span><br><span class="line">    	deny 217.112.97.187;# ip禁止</span><br><span class="line">    	deny 162.144.87.81;</span><br><span class="line">    	deny 171.8.158.168;</span><br><span class="line">    	deny 178.162.212.20;</span><br><span class="line">        deny 171.88.49.3;</span><br><span class="line">	    rewrite  ^/(.*) http://www.domain1.net/$1 permanent;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server # https 配置</span><br><span class="line">    #</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen     443 ssl;</span><br><span class="line">        server_name  www.domain2.com:443;</span><br><span class="line">        ssl  on;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        deny  218.28.166.162;</span><br><span class="line">        ssl_certificate      ../ssl/domain2.com/1_domain2.com_bundle.crt;</span><br><span class="line">        ssl_certificate_key  ../ssl/domain2.com/2_domain2.com.key;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:10m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line"></span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            rewrite ^(.*)  http://www.domain2.com$1 permanent;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        location ~* /reg &#123;</span><br><span class="line">            proxy_pass http://node_app;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* /login &#123;</span><br><span class="line">            proxy_pass http://node_app;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* /space &#123;</span><br><span class="line">            proxy_pass http://node_app;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.(css|js|gif|html|ttf|woff|swf)$ &#123;</span><br><span class="line">           proxy_pass http://node_app;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx_u57FA_u672C_u547D_u4EE4"><a href="#nginx_u57FA_u672C_u547D_u4EE4" class="headerlink" title="nginx基本命令"></a>nginx基本命令</h2><h4 id="u914D_u7F6E_u6587_u4EF6_u6B63_u786E_u6027_u68C0_u6D4B"><a href="#u914D_u7F6E_u6587_u4EF6_u6B63_u786E_u6027_u68C0_u6D4B" class="headerlink" title="配置文件正确性检测"></a>配置文件正确性检测</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br><span class="line">or</span><br><span class="line">nginx -t -c /opt/nginx.conf</span><br></pre></td></tr></table></figure>
<h4 id="u663E_u793A_u7248_u672C_u53F7"><a href="#u663E_u793A_u7248_u672C_u53F7" class="headerlink" title="显示版本号"></a>显示版本号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure>
<h4 id="u542F_u52A8"><a href="#u542F_u52A8" class="headerlink" title="启动"></a>启动</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx </span><br><span class="line">or</span><br><span class="line">nginx -c /opt/nginx.conf</span><br></pre></td></tr></table></figure>
<h4 id="u5173_u95ED"><a href="#u5173_u95ED" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
<p>or </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">kill -<span class="number">9</span> pid</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="nginx_u914D_u7F6E"><a href="#nginx_u914D_u7F6E" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight"><table>]]>
    </summary>
    
      <category term="nginx" scheme="http://zuoyanart.github.io/tags/nginx/"/>
    
      <category term="服务器端" scheme="http://zuoyanart.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang的各种数据格式的互相转换]]></title>
    <link href="http://zuoyanart.github.io/2015/12/27/golang%E7%9A%84%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>http://zuoyanart.github.io/2015/12/27/golang的各种数据格式的互相转换/</id>
    <published>2015-12-27T04:50:30.000Z</published>
    <updated>2016-01-06T04:29:57.816Z</updated>
    <content type="html"><![CDATA[<h4 id="int_to_string"><a href="#int_to_string" class="headerlink" title="int to string"></a>int to string</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (   </span><br><span class="line">    <span class="string">"strconv"</span>  </span><br><span class="line">) </span><br><span class="line"></span><br><span class="line">int i = 10</span><br><span class="line"> str1 := strconv.Itoa(i)</span><br></pre></td></tr></table></figure>
<h4 id="struct_to_json"><a href="#struct_to_json" class="headerlink" title="struct to json"></a>struct to json</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Server struct &#123;</span><br><span class="line">    ServerName string</span><br><span class="line">    ServerIP   string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := json.Marshal(s)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">   fmt.Println(<span class="string">"json err:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(string(b))</span><br></pre></td></tr></table></figure>
<p>未完待续</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="int_to_string"><a href="#int_to_string" class="headerlink" title="int to string"></a>int to string</h4><figure class="highlight js">]]>
    </summary>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ip地址库的选择]]></title>
    <link href="http://zuoyanart.github.io/2015/12/27/ip%E5%9C%B0%E5%9D%80%E5%BA%93%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://zuoyanart.github.io/2015/12/27/ip地址库的选择/</id>
    <published>2015-12-27T04:49:13.000Z</published>
    <updated>2016-01-06T04:29:57.019Z</updated>
    <content type="html"><![CDATA[<p>目前市面上常用的ip地址库，有以下几种</p>
<ul>
<li>1，新浪的api接口（限制未知）<a href="http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&amp;ip=218.192.3.42" target="_blank" rel="external">http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&amp;ip=218.192.3.42</a></li>
<li>2，淘宝的api接口 （10QPS） <a href="http://ip.taobao.com/" target="_blank" rel="external">http://ip.taobao.com/</a></li>
<li>3，百度的api接口 (100W/天) </li>
<li>4， 纯真ip(国内，数据提供模式导致数据可能不准确)</li>
<li>5，ipip.net （国内）</li>
<li>6， maxmid  (国外)</li>
</ul>
<p>####如何选择<br>1，web客户端<br>直接选择新浪的请求连接（<a href="http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js）就可以了，简单方便省事" target="_blank" rel="external">http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js）就可以了，简单方便省事</a></p>
<p>2，在服务器端：</p>
<ul>
<li>因为服务器端获取第三方api请求，不可控因素过多，建议是选择服务器端查询数据库的方式来走，这里可选的有三种：纯真ip，ipip.net和国外的maxmid。</li>
</ul>
<ul>
<li><p>从精度和准确度来讲应该是： 纯真ip &lt; ipip.et = maxmid</p>
</li>
<li><p>语言支持上，他们也大差不差，各个主流语言的程序SDK都已经给出。</p>
</li>
<li><p>产品使用度上，他们都有自己的不少的用户。但是貌似ipip.net更专业点，携程等等都是他们的用户。</p>
</li>
</ul>
<p>因为maxmid是国外的，所以建议现在使用 ipip.net</p>
<p>这里给出项目使用到的SDK：</p>
<ul>
<li><p>nodejs ：<a href="https://github.com/ChiChou/node-ipip" target="_blank" rel="external">https://github.com/ChiChou/node-ipip</a></p>
</li>
<li><p>golang ：<a href="https://github.com/wangtuanjie/ip17mon" target="_blank" rel="external">https://github.com/wangtuanjie/ip17mon</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>目前市面上常用的ip地址库，有以下几种</p>
<ul>
<li>1，新浪的api接口（限制未知）<a href="http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&amp;ip=218.192.3.4]]>
    </summary>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
      <category term="ip" scheme="http://zuoyanart.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang中使用mongodb]]></title>
    <link href="http://zuoyanart.github.io/2015/12/27/golang-user-mongodb/"/>
    <id>http://zuoyanart.github.io/2015/12/27/golang-user-mongodb/</id>
    <published>2015-12-27T04:47:31.000Z</published>
    <updated>2016-01-06T04:29:57.709Z</updated>
    <content type="html"><![CDATA[<h2 id="mgo_u7B80_u4ECB"><a href="#mgo_u7B80_u4ECB" class="headerlink" title="mgo简介"></a>mgo简介</h2><hr>
<p>mongodb官方没有关于go的mongodb的驱动，因此只能使用第三方驱动，mgo就是使用最多的一种。<br>mgo（音mango）是MongoDB的Go语言驱动，它用基于Go语法的简单API实现了丰富的特性，并经过良好测试。</p>
<p> 官网：<a href="http://labix.org/mgo" target="_blank" rel="external">http://labix.org/mgo</a></p>
<p> 文档：<a href="http://godoc.org/gopkg.in/mgo.v2" target="_blank" rel="external">http://godoc.org/gopkg.in/mgo.v2</a></p>
<h2 id="u5B89_u88C5_u4E0E_u4F7F_u7528"><a href="#u5B89_u88C5_u4E0E_u4F7F_u7528" class="headerlink" title="安装与使用"></a>安装与使用</h2><hr>
<p>安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get gopkg.in/mgo.v2</span><br></pre></td></tr></table></figure></p>
<p>go中使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Person struct &#123;</span><br><span class="line">	Id    bson.ObjectId `bson:<span class="string">"_id"</span>`</span><br><span class="line">	Name  string        `bson:<span class="string">"tname"</span>` //bson:<span class="string">"name"</span> 表示mongodb数据库中对应的字段名称</span><br><span class="line">	Phone string        `bson:<span class="string">"tphone"</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const URL = <span class="string">"192.168.1.43:50000"</span> //mongodb连接字符串</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	mgoSession *mgo.Session</span><br><span class="line">	dataBase   = <span class="string">"mydb"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 公共方法，获取session，如果存在则拷贝一份</span><br><span class="line"> */</span><br><span class="line">func getSession() *mgo.Session &#123;</span><br><span class="line">	if mgoSession == nil &#123;</span><br><span class="line">		var err error</span><br><span class="line">		mgoSession, err = mgo.Dial(URL)</span><br><span class="line">		if err != nil &#123;</span><br><span class="line">			panic(err) //直接终止程序运行</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//最大连接池默认为4096</span><br><span class="line">	return mgoSession.Clone()</span><br><span class="line">&#125;</span><br><span class="line">//公共方法，获取collection对象</span><br><span class="line">func witchCollection(collection string, s func(*mgo.Collection) error) error &#123;</span><br><span class="line">	session := getSession()</span><br><span class="line">	defer session.Close()</span><br><span class="line">	c := session.DB(dataBase).C(collection)</span><br><span class="line">	return s(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 添加person对象</span><br><span class="line"> */</span><br><span class="line">func AddPerson(p Person) string &#123;</span><br><span class="line">	p.Id = bson.NewObjectId()</span><br><span class="line">	query := func(c *mgo.Collection) error &#123;</span><br><span class="line">		return c.Insert(p)</span><br><span class="line">	&#125;</span><br><span class="line">	err := witchCollection(<span class="string">"person"</span>, query)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return <span class="string">"false"</span></span><br><span class="line">	&#125;</span><br><span class="line">	return p.Id.Hex()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取一条记录通过objectid</span><br><span class="line"> */</span><br><span class="line">func GetPersonById(id string) *Person &#123;</span><br><span class="line">	objid := bson.ObjectIdHex(id)</span><br><span class="line">	person := new(Person)</span><br><span class="line">	query := func(c *mgo.Collection) error &#123;</span><br><span class="line">		return c.FindId(objid).One(&amp;person)</span><br><span class="line">	&#125;</span><br><span class="line">	witchCollection(<span class="string">"person"</span>, query)</span><br><span class="line">	return person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取所有的person数据</span><br><span class="line">func PagePerson() []Person &#123;</span><br><span class="line">	var persons []Person</span><br><span class="line">	query := func(c *mgo.Collection) error &#123;</span><br><span class="line">		return c.Find(nil).All(&amp;persons)</span><br><span class="line">	&#125;</span><br><span class="line">	err := witchCollection(<span class="string">"person"</span>, query)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return persons</span><br><span class="line">	&#125;</span><br><span class="line">	return persons</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//更新person数据</span><br><span class="line">func UpdatePerson(query bson.M, change bson.M) string &#123;</span><br><span class="line">	exop := func(c *mgo.Collection) error &#123;</span><br><span class="line">		return c.Update(query, change)</span><br><span class="line">	&#125;</span><br><span class="line">	err := witchCollection(<span class="string">"person"</span>, exop)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return <span class="string">"true"</span></span><br><span class="line">	&#125;</span><br><span class="line">	return <span class="string">"false"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 执行查询，此方法可拆分做为公共方法</span><br><span class="line"> * [SearchPerson description]</span><br><span class="line"> * @param &#123;[type]&#125; collectionName string [description]</span><br><span class="line"> * @param &#123;[type]&#125; query          bson.M [description]</span><br><span class="line"> * @param &#123;[type]&#125; sort           bson.M [description]</span><br><span class="line"> * @param &#123;[type]&#125; fields         bson.M [description]</span><br><span class="line"> * @param &#123;[type]&#125; skip           int    [description]</span><br><span class="line"> * @param &#123;[type]&#125; limit          int)   (results      []interface&#123;&#125;, err error [description]</span><br><span class="line"> */</span><br><span class="line">func SearchPerson(collectionName string, query bson.M, sort string, fields bson.M, skip int, limit int) (results []interface&#123;&#125;, err error) &#123;</span><br><span class="line">	exop := func(c *mgo.Collection) error &#123;</span><br><span class="line">		return c.Find(query).Sort(sort).Select(fields).Skip(skip).Limit(limit).All(&amp;results)</span><br><span class="line">	&#125;</span><br><span class="line">	err = witchCollection(collectionName, exop)</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u89E3_u91CA_u8BF4_u660E"><a href="#u89E3_u91CA_u8BF4_u660E" class="headerlink" title="解释说明"></a>解释说明</h3><hr>
<h4 id="u8FDE_u63A5_u5B57_u7B26_u4E32"><a href="#u8FDE_u63A5_u5B57_u7B26_u4E32" class="headerlink" title="连接字符串"></a>连接字符串</h4><p>连接字符串可以使用mongodb标准形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mongodb:<span class="comment">//myuser:mypass@localhost:40001,otherhost:40001/mydb</span></span><br></pre></td></tr></table></figure></p>
<h4 id="u7ED3_u6784_u4F53_u58F0_u660E"><a href="#u7ED3_u6784_u4F53_u58F0_u660E" class="headerlink" title="结构体声明"></a>结构体声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Person struct &#123;</span><br><span class="line">	Id_   bson.ObjectId <span class="string">`bson:"_id"`</span></span><br><span class="line">	Name  string        <span class="string">`bson:"tname"`</span> <span class="comment">//bson:"name" 表示mongodb数据库中对应的字段名称</span></span><br><span class="line">	Phone string        <span class="string">`bson:"tphone"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意Person的字段首字母大写，不然不可见。通过bson:”name”这种方式可以定义MongoDB中集合的字段名，如果不定义，mgo自动把struct的字段名首字母小写作为集合的字段名。如果不需要获得id<em>，Id</em>可以不定义，在插入的时候会自动生成。但是建议是通过程序生成，这样可以提高mongodb的运行效率，也可以在插入完成之后直接返回ObjectId，供其他程序使用</p>
<p>手动创建一个ObjecitId<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bson.NewObjectId()<span class="comment">//创建一个objectid</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="mgo_u7B80_u4ECB"><a href="#mgo_u7B80_u4ECB" class="headerlink" title="mgo简介"></a>mgo简介</h2><hr>
<p>mongodb官方没有关于go的mongodb的驱动，因此只能使用]]>
    </summary>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
      <category term="mongodb" scheme="http://zuoyanart.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang使用sqlite]]></title>
    <link href="http://zuoyanart.github.io/2015/12/27/golang-use-sqlite/"/>
    <id>http://zuoyanart.github.io/2015/12/27/golang-use-sqlite/</id>
    <published>2015-12-27T04:43:00.000Z</published>
    <updated>2016-01-06T04:29:58.507Z</updated>
    <content type="html"><![CDATA[<h2 id="window_u5B89_u88C5_u95EE_u9898"><a href="#window_u5B89_u88C5_u95EE_u9898" class="headerlink" title="window安装问题"></a>window安装问题</h2><p>在import sqlite的时候，golang build 出现以下错误，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec: <span class="string">"gcc"</span>: executable file not found <span class="keyword">in</span> %PATH%</span><br></pre></td></tr></table></figure></p>
<p>原因是sqlitle3是个cgo库，需要gcd编译c代码<br>然后下载安装tdm-gcc即可（windosw版本）下载地址：<a href="http://tdm-gcc.tdragon.net/download" target="_blank" rel="external">http://tdm-gcc.tdragon.net/download</a></p>
<h2 id="u5728golang_u4E2D_u4F7F_u7528sqlite3"><a href="#u5728golang_u4E2D_u4F7F_u7528sqlite3" class="headerlink" title="在golang中使用sqlite3"></a>在golang中使用sqlite3</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package main&#10;&#10;import (&#10;    &#34;database/sql&#34;&#10;    &#34;fmt&#34;&#10;    _ &#34;github.com/mattn/go-sqlite3&#34;&#10;)&#10;&#10;func main() &#123;&#10;    db, err := sql.Open(&#34;sqlite3&#34;, &#34;./foo.db&#34;)&#10;    checkErr(err)&#10;&#10;    //&#25554;&#20837;&#25968;&#25454;&#10;    stmt, err := db.Prepare(&#34;INSERT INTO userinfo(username, departname, created) values(?,?,?)&#34;)&#10;    checkErr(err)&#10;&#10;    res, err := stmt.Exec(&#34;astaxie&#34;, &#34;&#30740;&#21457;&#37096;&#38376;&#34;, &#34;2012-12-09&#34;)&#10;    checkErr(err)&#10;&#10;    id, err := res.LastInsertId()&#10;    checkErr(err)&#10;&#10;    fmt.Println(id)&#10;    //&#26356;&#26032;&#25968;&#25454;&#10;    stmt, err = db.Prepare(&#34;update userinfo set username=? where uid=?&#34;)&#10;    checkErr(err)&#10;&#10;    res, err = stmt.Exec(&#34;astaxieupdate&#34;, id)&#10;    checkErr(err)&#10;&#10;    affect, err := res.RowsAffected()&#10;    checkErr(err)&#10;&#10;    fmt.Println(affect)&#10;&#10;    //&#26597;&#35810;&#25968;&#25454;&#10;    rows, err := db.Query(&#34;SELECT * FROM userinfo&#34;)&#10;    checkErr(err)&#10;&#10;    for rows.Next() &#123;&#10;        var uid int&#10;        var username string&#10;        var department string&#10;        var created string&#10;        err = rows.Scan(&#38;uid, &#38;username, &#38;department, &#38;created)&#10;        checkErr(err)&#10;        fmt.Println(uid)&#10;        fmt.Println(username)&#10;        fmt.Println(department)&#10;        fmt.Println(created)&#10;    &#125;&#10;&#10;    //&#21024;&#38500;&#25968;&#25454;&#10;    stmt, err = db.Prepare(&#34;delete from userinfo where uid=?&#34;)&#10;    checkErr(err)&#10;&#10;    res, err = stmt.Exec(id)&#10;    checkErr(err)&#10;&#10;    affect, err = res.RowsAffected()&#10;    checkErr(err)&#10;&#10;    fmt.Println(affect)&#10;&#10;    db.Close()&#10;&#10;&#125;&#10;&#10;func checkErr(err error) &#123;&#10;    if err != nil &#123;&#10;        panic(err)&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="window_u5B89_u88C5_u95EE_u9898"><a href="#window_u5B89_u88C5_u95EE_u9898" class="headerlink" title="window安装问题"></a>window安装问题</h2><]]>
    </summary>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
      <category term="sqlite" scheme="http://zuoyanart.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[golang 的编译安装以及supervisord部署]]></title>
    <link href="http://zuoyanart.github.io/2015/12/24/2015-12-24-golang-bushu/"/>
    <id>http://zuoyanart.github.io/2015/12/24/2015-12-24-golang-bushu/</id>
    <published>2015-12-24T05:14:33.000Z</published>
    <updated>2016-01-06T04:29:59.147Z</updated>
    <content type="html"><![CDATA[<h4 id="go_u7684_u7F16_u8BD1"><a href="#go_u7684_u7F16_u8BD1" class="headerlink" title="go的编译"></a>go的编译</h4><p>go的编译相对很简单，只需要一个命令即可完成,进入项目开发路径，输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install &lt;appName&gt;</span><br></pre></td></tr></table></figure></p>
<p>即可在bin文件夹下生成可执行文件 appName。此文件可直接运行。<br>备注：生成的可执行文件只包含go的程序文件，配置文件，views文件等需要拷贝过来，这样才能组成一个完整的运行程序。</p>
<h4 id="go_u7684_u90E8_u7F72"><a href="#go_u7684_u90E8_u7F72" class="headerlink" title="go的部署"></a>go的部署</h4><h6 id="supervisord_u5B89_u88C5"><a href="#supervisord_u5B89_u88C5" class="headerlink" title="supervisord安装"></a>supervisord安装</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install setuptools <span class="comment">//先安装工具</span></span><br><span class="line">yum install supervisor</span><br></pre></td></tr></table></figure>
<h5 id="u4FEE_u6539_u914D_u7F6E_u6587_u4EF6"><a href="#u4FEE_u6539_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>将最后一行的代码改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files = <span class="regexp">/etc/</span>supervisord.conf.d<span class="comment">/*.conf</span></span><br></pre></td></tr></table></figure></p>
<h5 id="u65B0_u589E_u6587_u4EF6_u5E76_u7F16_u5199_u914D_u7F6E"><a href="#u65B0_u589E_u6587_u4EF6_u5E76_u7F16_u5199_u914D_u7F6E" class="headerlink" title="新增文件并编写配置"></a>新增文件并编写配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/supervisord.conf.d/appname.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[program:appname]</span><br><span class="line">user=root</span><br><span class="line">command=<span class="regexp">/data/</span>host/liudu/go/bin/appname</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">startsecs=<span class="number">10</span></span><br><span class="line">stdout_logfile=<span class="regexp">/data/</span>host/liudu/golog/appname.log <span class="comment">//此文件需手动创建</span></span><br><span class="line">stdout_logfile_maxbytes=<span class="number">1</span>MB</span><br><span class="line">stdout_logfile_backups=<span class="number">10</span></span><br><span class="line">stdout_capture_maxbytes=<span class="number">1</span>MB</span><br><span class="line">stderr_logfile=<span class="regexp">/data/</span>host/liudu/golog/appname.log</span><br><span class="line">stderr_logfile_maxbytes=<span class="number">1</span>MB</span><br><span class="line">stderr_logfile_backups=<span class="number">10</span></span><br><span class="line">stderr_capture_maxbytes=<span class="number">1</span>MB</span><br><span class="line">stopsignal=INT</span><br><span class="line">[supervisord]</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command：表示运行的命令，填入完整的路径即可。</span><br><span class="line">autostart：表示是否跟随supervisor一起启动。</span><br><span class="line">autorestart：如果该程序挂了，是否重新启动。</span><br><span class="line">stdout_logfile：终端标准输出重定向文件。</span><br><span class="line">stderr_logfile：终端错误输出重定向文件。</span><br></pre></td></tr></table></figure>
<h5 id="u542F_u52A8_u670D_u52A1"><a href="#u542F_u52A8_u670D_u52A1" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf.d/renmaiApi/conf</span><br></pre></td></tr></table></figure>
<h5 id="supervisord__u7BA1_u7406"><a href="#supervisord__u7BA1_u7406" class="headerlink" title="supervisord 管理"></a>supervisord 管理</h5><ul>
<li>supervisord，初始启动Supervisord，启动、管理配置中设置的进程。</li>
<li>supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:appname]里配置的值，这个示例就是appname。</li>
<li>supervisorctl start programxxx，启动某个进程</li>
<li>supervisorctl restart programxxx，重启某个进程</li>
<li>supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)</li>
<li>supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</li>
<li>supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</li>
<li>supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。<blockquote>
<p>注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</p>
</blockquote>
</li>
</ul>
<h5 id="u9519_u8BEF_u8BB0_u5F55"><a href="#u9519_u8BEF_u8BB0_u5F55" class="headerlink" title="错误记录"></a>错误记录</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span>: Another program is already listening on a port that one <span class="keyword">of</span> our HTTP servers is configured to use.  Shut <span class="keyword">this</span> program down first before starting supervisord.</span><br><span class="line">For help, use /usr/bin/supervisord -h</span><br></pre></td></tr></table></figure>
<p>解决办法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name supervisor.sock</span><br><span class="line">unlink <span class="comment">/***/</span>supervisor.sock</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="go_u7684_u7F16_u8BD1"><a href="#go_u7684_u7F16_u8BD1" class="headerlink" title="go的编译"></a>go的编译</h4><p>go的编译相对很简单，只需要一个命令即可完成,进入项目开]]>
    </summary>
    
      <category term="golang" scheme="http://zuoyanart.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cookie的攻击与防御]]></title>
    <link href="http://zuoyanart.github.io/2015/11/18/cookie-safe/"/>
    <id>http://zuoyanart.github.io/2015/11/18/cookie-safe/</id>
    <published>2015-11-18T04:42:21.000Z</published>
    <updated>2016-01-06T04:29:58.941Z</updated>
    <content type="html"><![CDATA[<h2 id="Cookie_u6216Session_u7684_u5B89_u5168_u95EE_u9898"><a href="#Cookie_u6216Session_u7684_u5B89_u5168_u95EE_u9898" class="headerlink" title="Cookie或Session的安全问题"></a>Cookie或Session的安全问题</h2><p>用户登录的凭证，不管是Cookie还是Session，都会在浏览器端留下一段cookies，这就相当与给一道门留了一把钥匙，当黑客知晓怎么生成这把钥匙或者截获这把钥匙的时候，登录凭证这道门也就没有多少意义了。</p>
<h2 id="Cookie_uFF0CSession_u7684_u653B_u51FB_u65B9_u6CD5"><a href="#Cookie_uFF0CSession_u7684_u653B_u51FB_u65B9_u6CD5" class="headerlink" title="Cookie，Session的攻击方法"></a>Cookie，Session的攻击方法</h2><h5 id="u5F53_u670D_u52A1_u5668_u7AEF_u7684_u5224_u65AD_u662F_u57FA_u4E8Ecookie_u662F_u5426_u5B58_u5728_u7684_u65F6_u5019_uFF0C_u9ED1_u5BA2_u76F4_u63A5_u751F_u6210Cookie_u5C31_u53EF_u7834_u89E3"><a href="#u5F53_u670D_u52A1_u5668_u7AEF_u7684_u5224_u65AD_u662F_u57FA_u4E8Ecookie_u662F_u5426_u5B58_u5728_u7684_u65F6_u5019_uFF0C_u9ED1_u5BA2_u76F4_u63A5_u751F_u6210Cookie_u5C31_u53EF_u7834_u89E3" class="headerlink" title="当服务器端的判断是基于cookie是否存在的时候，黑客直接生成Cookie就可破解"></a>当服务器端的判断是基于cookie是否存在的时候，黑客直接生成Cookie就可破解</h5><p>这种服务器端验证方法显的格外幼稚，但是写程序的总归是人，总会犯一些低级的错误而不自知。比如以下：</p>
<ul>
<li><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0148657" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2015-0148657</a><br><img src="/mdimg/20151226230349.jpg" alt=""></p>
</li>
<li><p><a href="http://wooyun.org/bugs/wooyun-2010-017767" target="_blank" rel="external">http://wooyun.org/bugs/wooyun-2010-017767</a><br><img src="/mdimg/20151226231434.jpg" alt=""></p>
</li>
</ul>
<h5 id="xss_u653B_u51FB"><a href="#xss_u653B_u51FB" class="headerlink" title="xss攻击"></a>xss攻击</h5><p>当网络应用被xss成功攻击后，这把钥匙就会随着http请求发送到黑客自己的服务器上，从而可以获取到登录凭证，关于xss攻击，这里就不再叙述了</p>
<h5 id="http_u55C5_u63A2"><a href="#http_u55C5_u63A2" class="headerlink" title="http嗅探"></a>http嗅探</h5><p>当用户的所在网络被黑客入侵，从而可以拦截到网络请求包的时候，因为http是带cookie的，所以这个时候cookie也可以被黑客获取到</p>
<h5 id="cookie_u7684_u903B_u8F91_u9519_u8BEF"><a href="#cookie_u7684_u903B_u8F91_u9519_u8BEF" class="headerlink" title="cookie的逻辑错误"></a>cookie的逻辑错误</h5><p>支付宝Cookie策略在15年9月爆出一个逻辑漏洞，可以根据一个cookie的加密字符来突破安全验证体系。</p>
<p><a href="http://developer.51cto.com/art/201510/493683.htm" target="_blank" rel="external">http://developer.51cto.com/art/201510/493683.htm</a></p>
<p><img src="/mdimg/wKiom1YcW0uxh37EAAJyXD9NBWM730.jpg" alt=""></p>
<h2 id="cookie_u653B_u51FB_u7684_u9632_u5FA1"><a href="#cookie_u653B_u51FB_u7684_u9632_u5FA1" class="headerlink" title="cookie攻击的防御"></a>cookie攻击的防御</h2><ul>
<li>服务器端合理安排cookie生成策略，比如附加一个key来验证cookie里的信息不是被伪造的，这个key要经过加盐和多重加密，不然可能会被撞击破解</li>
<li>附加的key要包含客户端信息：比如ip或者useragent，这样来防范用户通过别的手段盗取到用户cookie后直接来使用</li>
<li>启用<code>http only</code>，这个主要是针对xss攻击后通过js获取cookie</li>
<li>启用https</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Cookie_u6216Session_u7684_u5B89_u5168_u95EE_u9898"><a href="#Cookie_u6216Session_u7684_u5B89_u5168_u95EE_u9898" class="headerlink" t]]>
    </summary>
    
      <category term="cookies" scheme="http://zuoyanart.github.io/tags/cookies/"/>
    
      <category term="安全" scheme="http://zuoyanart.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="攻击防御" scheme="http://zuoyanart.github.io/tags/%E6%94%BB%E5%87%BB%E9%98%B2%E5%BE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[node-webkit中使用sqlite3]]></title>
    <link href="http://zuoyanart.github.io/2014/01/22/node-webkit%E4%BD%BF%E7%94%A8sqlite/"/>
    <id>http://zuoyanart.github.io/2014/01/22/node-webkit使用sqlite/</id>
    <published>2014-01-22T07:29:14.000Z</published>
    <updated>2016-01-06T04:29:54.133Z</updated>
    <content type="html"><![CDATA[<p>sqlite3的官方文档提到：nodejs和node-webkit的ABI不同，所以默认的安装方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sqlite3</span><br></pre></td></tr></table></figure>
<p>安装的sqlite3是无法使用的，需要重新编译。</p>
<h4 id="u7F16_u8BD1_u65B9_u6CD5_uFF1A"><a href="#u7F16_u8BD1_u65B9_u6CD5_uFF1A" class="headerlink" title="编译方法："></a>编译方法：</h4><h5 id="windows_u4E0B_uFF1A"><a href="#windows_u4E0B_uFF1A" class="headerlink" title="windows下："></a>windows下：</h5><p>配置编译环境：</p>
<blockquote>
<p>安装python，据说nodejs的编译建议使用的的版本是2.6+，但不推荐3.0，所以本人也就不去深究了，本人使用的是2.7的版本</p>
<p>VC++编译器，包含在VS2010中（VC++ 2010 Express亦可）</p>
<p>安装nw-gyp ，使用命令：npm install nw-gyp -g</p>
</blockquote>
<h5 id="u7F16_u8BD1_u6B65_u9AA4"><a href="#u7F16_u8BD1_u6B65_u9AA4" class="headerlink" title="编译步骤"></a>编译步骤</h5><p>1，安装sqlte3，使用命令：npm install sqlite3</p>
<p>2，在cmd中切换到sqlite3所在的目录，cd ./node_module/sqlite3</p>
<p>3，输入命令：nw-gyp rebuild –target=0.8.4  (0.8.4为node-webkit的版本号)</p>
<p>4，把./build/Release/node-sqlite3.node 复制到 ./lib/binding/Release/node-v11-win32-ia32/ 下，如果文件夹不存在请手动创建</p>
<p>注意：本人在编译的时候遇到Python不是内部命令的错误，设置了path也不行，故本人在编译的时候多加了一个命令：set PATH=%PATH%;C:\Python27，把此语句放在第三部执行即可</p>
<h5 id="MAC_u7684_u7F16_u8BD1_uFF1A"><a href="#MAC_u7684_u7F16_u8BD1_uFF1A" class="headerlink" title="MAC的编译："></a>MAC的编译：</h5><p>省去 “windows编译中配置编译环境”中的1，2步外，剩下的都一致</p>
<p>注：真爱生命，远离windows</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>sqlite3的官方文档提到：nodejs和node-webkit的ABI不同，所以默认的安装方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line"]]>
    </summary>
    
      <category term="noedjs" scheme="http://zuoyanart.github.io/tags/noedjs/"/>
    
      <category term="sqlite" scheme="http://zuoyanart.github.io/tags/sqlite/"/>
    
      <category term="前端" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多ajax请求的各类解决方案（同步, 队列, cancel请求）的令一种解决方案]]></title>
    <link href="http://zuoyanart.github.io/2013/03/21/%E5%A4%9Aajax%E8%AF%B7%E6%B1%82%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://zuoyanart.github.io/2013/03/21/多ajax请求的解决方案/</id>
    <published>2013-03-21T10:23:42.000Z</published>
    <updated>2016-01-06T04:29:58.240Z</updated>
    <content type="html"><![CDATA[<p>  最近在做地图和滚动条相关的功能：在绑定地图的拖拽，缩放和滚动条的滚动事件时，遇到ajax队列问题，即：当我把地图拖到我想要的省市或者滚动条滚动到我想要的位置过程中，会发送很多ajax请求，而这些请求到的数据对用户是无用的，只有最后一次才有用，并且还造成了很多服务器请求数的浪费。</p>
<p>  然后在园子里找到了<a href="http://www.cnblogs.com/hongcaomao/" title="红草帽 * Arain" target="_blank" rel="external">红草帽 * Arain</a>的这篇文章：<a href="http://www.cnblogs.com/hongcaomao/archive/2012/03/19/multi-ajaxrequest.html" title="多ajax请求的各类解决方案（同步, 队列, cancel请求）" target="_blank" rel="external">多ajax请求的各类解决方案（同步, 队列, cancel请求）</a>，研究了一下发现此方法好是好，但没有解决http请求数的问题，因为就算是cancel掉请求，这个请求还是已经发送到了服务器(但并不绝对都是)，并且当ajax执行比较快的时候cancel掉已经是无用了(当然实际场景中发送ajax间隔时间都是很短的，所以影响基本也很小)。</p>
<p>测试代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">     test(i);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$.ajaxSingle($.extend(_settings,&#123;</span><br><span class="line">         type:<span class="string">"post"</span>,</span><br><span class="line">        url:<span class="string">"PostPage.aspx?i="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()+i,</span><br><span class="line">        data:<span class="string">"second=2"</span>,</span><br><span class="line">       anync:<span class="literal">false</span>,</span><br><span class="line">       className:<span class="string">"post"</span></span><br><span class="line">   &#125;));&#125;,i*<span class="number">40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="/mdimg/21175810-293cecf67c5242ceb3e268570a8787b1.png" alt=""></p>
<p>可以看到间隔40ms发送请求就已经一大部分无法删除掉了(虽然实际场景更多的是发送ajax请求间隔很短)。</p>
<p>然后就觉得写那么多代码已经没必要了，简单的用setTimeout实现就可以了，而且能从根上杜绝以上两个问题发生。此方法也是在测试的时候发现的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    clearTimeout(t);</span><br><span class="line">    t=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            url:<span class="string">"PostPage.aspx"</span>,</span><br><span class="line">            data:<span class="string">"second=1"</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样子做的话：就不会因为时间间隔，执行速度等原因造成的请求删除不掉或者删除掉但服务器已经执行部分程序的情况，代码量少而且也很容易理解。</p>
<p>但是这也会有其他问题：比如用户等待数据的时候可能会偏长，这时候就要根据实际发送ajax请求的间隔来合理定义延迟时间(通常都不会长)。</p>
<p>另外一些场景，比如表单的提交，这时候还是灰掉按钮比较好。</p>
<p>以上是个人的一些想法，如方法有什么问题可以留言讨论。</p>
<hr>
<p>下面我把红草帽 * Arain文章也贴出来，方便查看</p>
<p>ajax带来很好的用户体验，于是一个稍微注重web系统使用ajax基本成为必然。当传统功能型web项目向用户体验型项目转变时，层出不穷的需求就来了。正如本篇所介绍的就是一个多个AJAX请求的情况下，如何利用jquery来处理几种case。</p>
<p>多个ajax请求同时发送，相互无依赖。<br>多个ajax请求相互依赖，必须有先后顺序。<br>多个请求被同时发送，只需要最后一个请求。<br>第1种case</p>
<p>应用场景： 这个场景很多，一个页面打开是多个区域同时请求后台得到各自的数据，没依赖，没顺序。<br>处理方案： 直接用jquery的ajax函数。这个用的非常多，这里从略，可看后面的代码中例子。</p>
<p>第2种case</p>
<p>应用场景： 多个ajax请求，需要顺序执行，后一个ajax请求的执行参数是前一个ajax的结果。例如： 用户登录后我们发送一次请求得到用户的应用ID，然后利用应用ID发送一次请求得到具体的应用内容（例子虽然不是太恰当，但基本就是这个意思了）。<br>处理方法： </p>
<pre><code>1. 利用ajax参数async设置为false，进行同步操作。(这个方法只适合同域操作，跨域需使用下面两种方法)
2. 利用ajax嵌套（这个同第1种情况）
3. 利用队列进行操作
</code></pre><p>jquery ajax队列操作核心代码:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajaxRequest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    $.ajaxQueue = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options = $.extend(&#123; className: <span class="string">'DEFEARTNAME'</span> &#125;, $.ajaxSettings, settings);</span><br><span class="line">        <span class="keyword">var</span> _complete = options.complete;</span><br><span class="line">        $.extend(options, &#123;</span><br><span class="line">            complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (_complete)</span><br><span class="line">                    _complete.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ($(<span class="built_in">document</span>).queue(options.className).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="built_in">document</span>).dequeue(options.className);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ajaxRequest[options.className] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="built_in">document</span>).queue(options.className, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(options);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">document</span>).queue(options.className).length == <span class="number">1</span> &amp;&amp; !ajaxRequest[options.className]) &#123;</span><br><span class="line">            ajaxRequest[options.className] = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="built_in">document</span>).dequeue(options.className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<p>第3中case</p>
<p>应用场景： 比较典型的是autocomplete控件的操作，这个我们可以使用第2种情况的处理方法，但我们可能只需要最后次按键后返回的结果，这样利用第2种处理方法未免有些浪费。<br>处理方法： 保留最后一次请求，cancel之前的请求。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> jqXhr = &#123;&#125;；</span><br><span class="line"> $.ajaxSingle = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options = $.extend(&#123; className: <span class="string">'DEFEARTNAME'</span> &#125;, $.ajaxSettings, settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jqXhr[options.className]) &#123;</span><br><span class="line">            jqXhr[options.className].abort();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jqXhr[options.className] = $.ajax(options);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<p>对于这些case都是在多个ajax请求，响应时间不能控制的情况。下面是完整Demo代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jqXhr = &#123;&#125;,</span><br><span class="line">        ajaxRequest = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    $.ajaxQueue = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options = $.extend(&#123; className: <span class="string">'DEFEARTNAME'</span> &#125;, $.ajaxSettings, settings);</span><br><span class="line">        <span class="keyword">var</span> _complete = options.complete;</span><br><span class="line">        $.extend(options, &#123;</span><br><span class="line">            complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (_complete)</span><br><span class="line">                    _complete.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ($(<span class="built_in">document</span>).queue(options.className).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="built_in">document</span>).dequeue(options.className);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ajaxRequest[options.className] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="built_in">document</span>).queue(options.className, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(options);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">document</span>).queue(options.className).length == <span class="number">1</span> &amp;&amp; !ajaxRequest[options.className]) &#123;</span><br><span class="line">            ajaxRequest[options.className] = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="built_in">document</span>).dequeue(options.className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ajaxSingle = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> options = $.extend(&#123; className: <span class="string">'DEFEARTNAME'</span> &#125;, $.ajaxSettings, settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jqXhr[options.className]) &#123;</span><br><span class="line">            jqXhr[options.className].abort();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jqXhr[options.className] = $.ajax(options);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajaxSleep = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _settings = &#123;</span><br><span class="line">        type: <span class="string">'GET'</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> thtml = $(<span class="string">'#txtContainer'</span>).html();</span><br><span class="line">            $(<span class="string">'#txtContainer'</span>).html(thtml + <span class="string">"&lt;br /&gt;"</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params">seconds, mode, isAsync</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> mode = mode || <span class="string">'ajax'</span>,</span><br><span class="line">                        isAsync = isAsync || <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            $[mode]($.extend(_settings, &#123;</span><br><span class="line">                url: <span class="string">"ResponsePage.aspx?second="</span> + seconds,</span><br><span class="line">                <span class="keyword">async</span>: isAsync,</span><br><span class="line">                className: <span class="string">'GET'</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;,</span><br><span class="line">        post: <span class="function"><span class="keyword">function</span> (<span class="params">seconds, mode, isAsync</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> mode = mode || <span class="string">'ajax'</span>,</span><br><span class="line">                        isAsync = isAsync || <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            $[mode]($.extend(_settings, &#123;</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                url: <span class="string">"PostPage.aspx"</span>,</span><br><span class="line">                data: &#123; second: seconds &#125;,</span><br><span class="line">                <span class="keyword">async</span>: isAsync,</span><br><span class="line">                className: <span class="string">'POST'</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; ());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> launch = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#txtContainer'</span>).html(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mode = settings.mode,</span><br><span class="line">                isAsync = settings.isAsync;</span><br><span class="line"></span><br><span class="line">    ajaxSleep.get(<span class="number">12</span>, mode, isAsync);</span><br><span class="line">    ajaxSleep.get(<span class="number">10</span>, mode, isAsync);</span><br><span class="line">    ajaxSleep.get(<span class="number">8</span>, mode, isAsync);</span><br><span class="line"></span><br><span class="line">    ajaxSleep.post(<span class="number">6</span>, mode, isAsync);</span><br><span class="line">    ajaxSleep.post(<span class="number">4</span>, mode, isAsync);</span><br><span class="line">    ajaxSleep.post(<span class="number">2</span>, mode, isAsync);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//第1种case</span></span><br><span class="line">    $(<span class="string">'#btnLaunchAsync'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        launch(&#123; isAsync: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第2种case</span></span><br><span class="line">    $(<span class="string">'#btnLaunchSync'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        launch(&#123;&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第2种case</span></span><br><span class="line">    $(<span class="string">'#btnLaunchQueue'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        launch(&#123; mode: <span class="string">'ajaxQueue'</span>, isAsync: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第3种case</span></span><br><span class="line">    $(<span class="string">'#btnLaunchSingle'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        launch(&#123; mode: <span class="string">'ajaxSingle'</span>, isAsync: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">id</span>=<span class="value">"Head1"</span> <span class="attribute">runat</span>=<span class="value">"server"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/default.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">runat</span>=<span class="value">"server"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"btnLaunchAsync"</span> <span class="attribute">value</span>=<span class="value">"Launch Asynchronous Request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"btnLaunchSync"</span> <span class="attribute">value</span>=<span class="value">"Launch Synchronous Request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"btnLaunchQueue"</span> <span class="attribute">value</span>=<span class="value">"Launch Requested Queue"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"btnLaunchSingle"</span> <span class="attribute">value</span>=<span class="value">"Launch Single Request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"txtContainer"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ResponsePage.aspx</span></span><br><span class="line">protected <span class="keyword">void</span> Page_Load(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            int seconds = int.Parse(Request.QueryString[<span class="string">"second"</span>]);</span><br><span class="line">            Thread.Sleep(seconds*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            Response.Write(<span class="string">"GET: selpt for "</span>+ seconds.ToString() +<span class="string">" sec(s)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PostPage.aspx</span></span><br><span class="line">        protected <span class="keyword">void</span> Page_Load(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            int seconds = int.Parse(Request.Form[<span class="string">"second"</span>]);</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(seconds * <span class="number">1000</span>); </span><br><span class="line"></span><br><span class="line">            Response.Write(<span class="string">"POST: selpt for "</span> + seconds.ToString() + <span class="string">" sec(s)"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>  最近在做地图和滚动条相关的功能：在绑定地图的拖拽，缩放和滚动条的滚动事件时，遇到ajax队列问题，即：当我把地图拖到我想要的省市或者滚动条滚动到我想要的位置过程中，会发送很多ajax请求，而这些请求到的数据对用户是无用的，只有最后一次才有用，并且还造成了很多服务器请求数]]>
    </summary>
    
      <category term="ajax" scheme="http://zuoyanart.github.io/tags/ajax/"/>
    
      <category term="前端" scheme="http://zuoyanart.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="队列" scheme="http://zuoyanart.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mongodb内嵌对象删除]]></title>
    <link href="http://zuoyanart.github.io/2013/02/25/mongodb%E5%86%85%E5%B5%8C%E5%AF%B9%E8%B1%A1%E5%88%A0%E9%99%A4/"/>
    <id>http://zuoyanart.github.io/2013/02/25/mongodb内嵌对象删除/</id>
    <published>2013-02-25T07:09:08.000Z</published>
    <updated>2016-01-06T04:29:54.673Z</updated>
    <content type="html"><![CDATA[<p>这个问题在做数据结构的时候经常用到，刚开始没怎么留意，因为我的数组都只是单元素文档：只有一个ObjectId，这样用pull操作完全没有问题，但后来用对象作为了数据的内容，就是数组内嵌的对象，这时候用pull就是各种不生效。发现Mongodb对数组内对象的get和pull使用的书写格式不一致。下面我列出可以使用的书写方式：</p>
<p>先列出mongodb的数据结构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"_id"</span> : ObjectId,</span><br><span class="line">  <span class="string">"Uid"</span> : ObjectId,</span><br><span class="line">  <span class="string">"Visit"</span> : Visit[<span class="number">16</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中Visit为对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///访客id</span></span><br><span class="line">ObjectId  VId;</span><br><span class="line"><span class="comment">///访问时间</span></span><br><span class="line">DateTime Time;</span><br><span class="line">则删除数组内某个Vid的写法为(我的客户端是：samus)：</span><br><span class="line"></span><br><span class="line">MongoDbHelper.Update&lt;FriendTopicVisit&gt;(<span class="string">"FriendTopicVisit"</span>, <span class="keyword">new</span> Document(<span class="string">"$pull"</span>, <span class="keyword">new</span> Document(<span class="string">"Visit"</span>,<span class="keyword">new</span> Document(<span class="string">"Vid"</span>,visit.Vid))), <span class="keyword">new</span> Document(<span class="string">"_id"</span>, id));</span><br></pre></td></tr></table></figure>
<p>方法不复杂，但不知道方法再去找方法也确实挺费时间的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个问题在做数据结构的时候经常用到，刚开始没怎么留意，因为我的数组都只是单元素文档：只有一个ObjectId，这样用pull操作完全没有问题，但后来用对象作为了数据的内容，就是数组内嵌的对象，这时候用pull就是各种不生效。发现Mongodb对数组内对象的get和pull使]]>
    </summary>
    
      <category term="mongodb" scheme="http://zuoyanart.github.io/tags/mongodb/"/>
    
  </entry>
  
</feed>
